{
  "name": "KRAI Vector Store Setup - From Database Chunks",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "When clicking 'Test workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [400, 400],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id,\n  content,\n  metadata,\n  embedding\nFROM krai.chunks\nWHERE embedding IS NULL\nLIMIT 100;"
      },
      "id": "get-chunks",
      "name": "Get Chunks from Database",
      "type": "n8n-nodes-base.postgres",
      "position": [600, 400],
      "typeVersion": 2.4,
      "notes": "Gets unprocessed chunks from krai.chunks table"
    },
    {
      "parameters": {
        "model": "nomic-embed-text",
        "options": {}
      },
      "id": "embeddings",
      "name": "Embeddings Ollama",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "position": [800, 600],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Create embeddings for each chunk\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const embedding = await $('Embeddings Ollama').embed(item.json.content);\n  \n  results.push({\n    json: {\n      id: item.json.id,\n      content: item.json.content,\n      metadata: item.json.metadata,\n      embedding: embedding\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "create-embeddings",
      "name": "Create Embeddings",
      "type": "n8n-nodes-base.code",
      "position": [800, 400],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE krai.chunks\nSET embedding = '{{ $json.embedding }}'::vector\nWHERE id = '{{ $json.id }}';"
      },
      "id": "update-embeddings",
      "name": "Update Embeddings in Database",
      "type": "n8n-nodes-base.postgres",
      "position": [1000, 400],
      "typeVersion": 2.4,
      "notes": "Stores embeddings back in krai.chunks table"
    },
    {
      "parameters": {
        "content": "## Setup Instructions\n\n### What This Does\nThis workflow creates vector embeddings for text chunks that are already in your database.\n\n**Your data flow:**\n1. PDFs → Backend Processing → `krai.chunks` table\n2. This workflow → Creates embeddings → Stores in `krai.chunks.embedding`\n3. Main workflow → Uses embeddings for semantic search\n\n### Prerequisites\n1. Ollama with `nomic-embed-text` model\n2. Database table `krai.chunks` with columns:\n   - id (uuid)\n   - content (text)\n   - metadata (jsonb)\n   - embedding (vector(768))\n\n### How to Run\n1. Click \"Test workflow\"\n2. Processes 100 chunks at a time\n3. Run multiple times until all chunks have embeddings\n\n### Check Progress\n```sql\nSELECT \n  COUNT(*) FILTER (WHERE embedding IS NOT NULL) as embedded,\n  COUNT(*) FILTER (WHERE embedding IS NULL) as pending,\n  COUNT(*) as total\nFROM krai.chunks;\n```\n\n### Notes\n- Processing time: ~10-20 chunks/second\n- Embedding dimension: 768 (nomic-embed-text)\n- Run this whenever you add new documents",
        "height": 600,
        "width": 400,
        "color": 7
      },
      "id": "sticky-note",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [200, 200],
      "typeVersion": 1
    }
  ],
  "connections": {
    "When clicking 'Test workflow'": {
      "main": [[{ "node": "Get Chunks from Database", "type": "main", "index": 0 }]]
    },
    "Get Chunks from Database": {
      "main": [[{ "node": "Create Embeddings", "type": "main", "index": 0 }]]
    },
    "Create Embeddings": {
      "main": [[{ "node": "Update Embeddings in Database", "type": "main", "index": 0 }]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "instanceId": "krai-vector-setup"
  },
  "tags": [
    {
      "name": "KRAI",
      "id": "krai"
    },
    {
      "name": "Setup",
      "id": "setup"
    }
  ]
}
