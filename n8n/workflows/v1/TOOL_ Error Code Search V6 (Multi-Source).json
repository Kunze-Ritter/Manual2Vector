{
  "name": "TOOL: Error Code Search V6 (Multi-Source)",
  "nodes": [
    {
      "parameters": {
        "content": "# FastAPI starten\n\n## Schritt 1: Backend starten\n\n### Option A: Mit Batch-Datei (Windows)\n\nDoppelklicke auf die Datei:\n```backend\\START_API_SERVER.bat```\n\n### Option B: Mit Python Skript\n```bash```\n```cd backend```\n```python main.py```\n\n## Schritt 2: Checken ob API läuft\nÖffne Browser: http://localhost:8000/docs\n\nDu solltest die FastAPI Swagger Docs sehen!",
        "height": 528,
        "width": 1440,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        96,
        256
      ],
      "id": "3ebbd5d1-7d51-4a46-ab51-a9fb566d69b2",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        576,
        464
      ],
      "id": "6240a144-c2f1-4677-a2f1-09ebe1b87248",
      "name": "Execute Workflow Trigger",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Try multiple input sources\nlet input = {};\n\ntry {\n  // Method 1: From $input (workflow execution)\n  if ($input && $input.first && $input.first()) {\n    input = $input.first().json || {};\n  }\n} catch (e) {\n  console.log('No $input available');\n}\n\n// Method 2: From $json (direct node input)\nif (Object.keys(input).length === 0 && typeof $json !== 'undefined') {\n  input = $json;\n}\n\n// Method 3: From workflow parameters\nif (Object.keys(input).length === 0 && typeof $parameter !== 'undefined') {\n  input = $parameter;\n}\n\n// IMPORTANT: Check if input is wrapped in 'query' object (N8N Agent format)\nif (input.query && typeof input.query === 'object') {\n  input = input.query;\n}\n\n// Debug: Log what we got\nconsole.log('Input received:', JSON.stringify(input));\nconsole.log('Input keys:', Object.keys(input));\n\n// Extract error code from multiple possible fields\nlet errorCode = input.error_code || input.code || input.errorCode || '';\nlet manufacturer = input.manufacturer || input.mfr || input.brand || null;\nlet product = input.product || input.model || input.product_name || null;\n\n// If error_code field contains full text (e.g., \"HP X580 Error 31.03.30\"), extract from it\nif (errorCode && errorCode.length > 15) {\n  const text = errorCode;\n  \n  // Extract error code pattern\n  const codeMatch = text.match(/\\b(\\d{2}\\.\\d{2,3}\\.\\d{2})\\b/);\n  if (codeMatch) {\n    errorCode = codeMatch[1];\n  }\n  \n  // Extract manufacturer (HP, Canon, Lexmark, etc.)\n  const mfrMatch = text.match(/\\b(HP|Canon|Lexmark|Konica Minolta|Ricoh|Brother|Xerox|Kyocera|Sharp|Fujifilm|Riso|Toshiba|OKI|Epson)\\b/i);\n  if (mfrMatch && !manufacturer) {\n    manufacturer = mfrMatch[1];\n  }\n  \n  // Extract product/model (e.g., X580, M479, etc.)\n  const productMatch = text.match(/\\b([A-Z]\\d{3,4}[A-Z]?|\\d{4}[A-Z])\\b/);\n  if (productMatch && !product) {\n    product = productMatch[1];\n  }\n}\n\n// If still no error code, try to extract from text field\nif (!errorCode && input.text) {\n  const match = input.text.match(/\\b(\\d{2}\\.\\d{2,3}\\.\\d{2})\\b/);\n  if (match) {\n    errorCode = match[1];\n  }\n}\n\nif (!errorCode) {\n  throw new Error('No error code provided! Input was: ' + JSON.stringify(input) + '. Expected: {\"error_code\": \"30.03.30\", \"manufacturer\": \"HP\", \"product\": \"X580\"}');\n}\n\nreturn {\n  error_code: errorCode,\n  manufacturer: manufacturer,\n  product: product\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        464
      ],
      "id": "5e64855d-e5c8-4697-ad8c-4072e9914ebe",
      "name": "Extract Parameters1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://crujfdpqdjzcfqeyhang.supabase.co/rest/v1/rpc/search_error_code_multi_source",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  p_error_code: $json.error_code,\n  p_manufacturer_name: $json.manufacturer,\n  p_product_name: $json.product\n}) }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1072,
        464
      ],
      "id": "4ca67ccb-4b8f-4aba-b247-f8a02fac6454",
      "name": "Search Multi-Source1",
      "alwaysOutputData": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "pw6qHzCTRXyifJFB",
          "name": "Supabase Header Auth account"
        },
        "httpBearerAuth": {
          "id": "05tCnbg5nfqcjxik",
          "name": "Bearer Auth account"
        },
        "supabaseApi": {
          "id": "VOEfJ5TSCcCT8bKn",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format Response Node - Error Code Search V6\n// Copy this into N8N Code Node\n\nlet results = $input.first().json;\n\n// Debug: Check what we got\nconsole.log('Results type:', typeof results);\nconsole.log('Results keys:', Object.keys(results));\nconsole.log('Results:', JSON.stringify(results).substring(0, 500));\n\n// Supabase returns array directly from RPC call\nif (!Array.isArray(results)) {\n  console.log('Not an array, wrapping...');\n  results = [results];\n}\n\nconsole.log('After processing - Array length:', results.length);\nif (results.length > 0) {\n  console.log('First item keys:', Object.keys(results[0]));\n  console.log('First item:', JSON.stringify(results[0]));\n}\n\nif (!results || results.length === 0) {\n  return {\n    success: false,\n    message: 'Error Code nicht gefunden!\\n\\nBitte pruefe:\\n- Ist der Code korrekt? (z.B. 30.03.30)\\n- Ist der Hersteller korrekt?\\n- Ist das Modell korrekt?'\n  };\n}\n\n// Group by source type\nconst documents = results.filter(r => r.source_type === 'document');\nconst videos = results.filter(r => r.source_type === 'video');\nconst relatedVideos = results.filter(r => r.source_type === 'related_video');\n\nlet message = 'ERROR CODE: ' + results[0].code + '\\n';\nif (results[0].error_description) {\n  message += results[0].error_description + '\\n';\n}\nmessage += '\\n';\n\n// Documents\nif (documents.length > 0) {\n  message += 'DOKUMENTATION (' + documents.length + '):\\n\\n';\n  \n  documents.forEach((doc, i) => {\n    message += (i+1) + '. ' + doc.source_title;\n    if (doc.page_number) {\n      message += ' (Seite ' + doc.page_number + ')';\n    }\n    message += '\\n';\n    \n    if (doc.solution_text) {\n      const solution = doc.solution_text.substring(0, 150);\n      message += '   Loesung: ' + solution;\n      if (doc.solution_text.length > 150) {\n        message += '...';\n      }\n      message += '\\n';\n    }\n    \n    if (doc.parts_list) {\n      message += '   Parts: ' + doc.parts_list + '\\n';\n    }\n    message += '\\n';\n  });\n}\n\n// Direct video matches\nif (videos.length > 0) {\n  message += '\\nVIDEOS (' + videos.length + '):\\n\\n';\n  \n  videos.forEach((vid, i) => {\n    message += (i+1) + '. ' + vid.source_title;\n    if (vid.video_duration) {\n      const mins = Math.floor(vid.video_duration / 60);\n      const secs = vid.video_duration % 60;\n      message += ' (' + mins + ':' + String(secs).padStart(2, '0') + ')';\n    }\n    message += '\\n';\n    \n    if (vid.solution_text) {\n      const solution = vid.solution_text.substring(0, 100);\n      message += '   ' + solution;\n      if (vid.solution_text.length > 100) {\n        message += '...';\n      }\n      message += '\\n';\n    }\n    \n    if (vid.video_url) {\n      message += '   Link: ' + vid.video_url + '\\n';\n    }\n    message += '\\n';\n  });\n}\n\n// Related videos\nif (relatedVideos.length > 0) {\n  message += '\\nVERWANDTE VIDEOS (' + relatedVideos.length + '):\\n\\n';\n  \n  relatedVideos.slice(0, 3).forEach((vid, i) => {\n    message += (i+1) + '. ' + vid.source_title;\n    if (vid.video_duration) {\n      const mins = Math.floor(vid.video_duration / 60);\n      const secs = vid.video_duration % 60;\n      message += ' (' + mins + ':' + String(secs).padStart(2, '0') + ')';\n    }\n    message += '\\n';\n    \n    if (vid.video_url) {\n      message += '   Link: ' + vid.video_url + '\\n';\n    }\n    message += '\\n';\n  });\n  \n  if (relatedVideos.length > 3) {\n    message += '... und ' + (relatedVideos.length - 3) + ' weitere Videos\\n';\n  }\n}\n\nmessage += '\\nMoechtest du mehr Details zu einem der Quellen?';\n\nreturn {\n  success: true,\n  message: message,\n  raw_data: {\n    documents: documents,\n    videos: videos,\n    related_videos: relatedVideos,\n    total_sources: results.length\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        464
      ],
      "id": "54f3730b-4b5f-415d-a66a-3cc85399ee29",
      "name": "Format Response1",
      "alwaysOutputData": true
    }
  ],
  "pinData": {},
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Extract Parameters1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Parameters1": {
      "main": [
        [
          {
            "node": "Search Multi-Source1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Multi-Source1": {
      "main": [
        [
          {
            "node": "Format Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "yQdzMFpscwTbOVBP"
  },
  "versionId": "719adb7c-47f8-425e-874e-82661663eabf",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c6c1a437e8b16512082bde84b62b61f6117713bbbdf560b47f5bdf35aa8946c8"
  },
  "id": "sVfKisaogX0ECRef",
  "tags": []
}