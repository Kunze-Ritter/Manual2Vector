{
  "name": "TOOL: Error Code Search v4 (Smart Input)",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [300, 300],
      "id": "trigger",
      "name": "Execute Workflow Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Extract error code from user input\n// Handles: \"HP E877 Error 31.13.01\", \"31.13.01\", \"Error code 31.13.01\", etc.\n\nconst input = $input.first().json.error_code || '';\n\n// Common error code patterns\nconst patterns = [\n  // HP format: XX.XX.XX or XX.XX\n  /\\b(\\d{2}\\.\\d{2}\\.\\d{2})\\b/,\n  /\\b(\\d{2}\\.\\d{2})\\b/,\n  // Konica Minolta: C####, J##-##\n  /\\b([CJ]\\d{4,5})\\b/i,\n  /\\b([CJ]\\d{2}-\\d{2})\\b/i,\n  // Canon: E### or ####\n  /\\b(E\\d{3,4})\\b/i,\n  /\\b(#\\d{3})\\b/,\n  // Ricoh: SC###\n  /\\b(SC\\d{3,4})\\b/i,\n  // Brother: ## or E##\n  /\\b(E\\d{2})\\b/i,\n  // Generic: Any number pattern\n  /\\b(\\d{2,4})\\b/\n];\n\nlet extractedCode = null;\n\n// Try each pattern\nfor (const pattern of patterns) {\n  const match = input.match(pattern);\n  if (match) {\n    extractedCode = match[1];\n    break;\n  }\n}\n\n// If no pattern matched, use original input\nif (!extractedCode) {\n  extractedCode = input.trim();\n}\n\nreturn {\n  error_code: extractedCode,\n  original_input: input\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300],
      "id": "extract-code",
      "name": "Extract Error Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  ec.error_code,\n  ec.error_description,\n  ec.solution_text,\n  ec.severity_level,\n  ec.requires_technician,\n  ec.confidence_score,\n  ec.page_number,\n  COALESCE(c.text_chunk, '') as context_text,\n  COALESCE(d.filename, '') as document_name,\n  COALESCE(d.manufacturer, m.name, '') as manufacturer,\n  COALESCE(d.series, '') as series,\n  ec.created_at,\n  COALESCE(\n    json_agg(\n      json_build_object(\n        'url', i.storage_url,\n        'description', COALESCE(i.ai_description, ''),\n        'ocr_text', COALESCE(i.ocr_text, ''),\n        'match_method', eci.match_method,\n        'confidence', eci.match_confidence,\n        'page_number', i.page_number\n      ) ORDER BY eci.display_order\n    ) FILTER (WHERE i.id IS NOT NULL),\n    '[]'::json\n  ) as images\nFROM krai_intelligence.error_codes ec\nLEFT JOIN krai_intelligence.chunks c ON ec.chunk_id = c.id\nLEFT JOIN krai_intelligence.error_code_images eci ON ec.id = eci.error_code_id\nLEFT JOIN krai_content.images i ON eci.image_id = i.id\nLEFT JOIN krai_core.documents d ON ec.document_id = d.id\nLEFT JOIN krai_core.manufacturers m ON ec.manufacturer_id = m.id\nWHERE UPPER(TRIM(ec.error_code)) = UPPER(TRIM('{{ $json.error_code }}'))\nGROUP BY ec.id, ec.error_code, ec.error_description, ec.solution_text, ec.severity_level, ec.requires_technician, ec.confidence_score, ec.page_number, c.text_chunk, d.filename, d.manufacturer, m.name, d.series, ec.created_at\nORDER BY \n  CASE \n    WHEN UPPER(ec.error_code) = UPPER('{{ $json.error_code }}') THEN 1\n    ELSE 2\n  END\nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [700, 300],
      "id": "query-error",
      "name": "Query Error Code",
      "credentials": {
        "postgres": {
          "id": "B0uJAfAUAdsgXNJd",
          "name": "Postgres Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format Error Code Response with MULTIPLE IMAGES support\nconst item = $input.first().json;\nconst extractedCode = $('Extract Error Code').first().json.error_code;\nconst originalInput = $('Extract Error Code').first().json.original_input;\n\nif (!item || !item.error_code) {\n  return {\n    found: false,\n    message: `🔴 Error Code nicht gefunden: ${extractedCode}\\n\\n❌ Dieser Error Code ist nicht in der Datenbank.\\n\\n💡 Original-Eingabe: \"${originalInput}\"\\n💡 Extrahierter Code: \"${extractedCode}\"\\n\\n🔍 Versuche:\\n- Prüfe die Schreibweise (z.B. 31.13.01)\\n- Nutze Vector Search für ähnliche Probleme\\n- Beschreibe das Problem direkt`\n  };\n}\n\nconst formatSolution = (text) => {\n  if (!text) return 'Keine Lösung verfügbar';\n  const lines = text.split('\\n').filter(line => line.trim());\n  if (lines[0] && lines[0].match(/^\\d+[\\.\\)]\\s/)) {\n    return lines.join('\\n');\n  }\n  return lines.map((line, i) => `${i + 1}. ${line.trim()}`).join('\\n');\n};\n\nlet images = [];\ntry {\n  if (typeof item.images === 'string') {\n    images = JSON.parse(item.images);\n  } else if (Array.isArray(item.images)) {\n    images = item.images;\n  }\n} catch (e) {\n  console.log('Failed to parse images:', e);\n}\n\nlet response = `🔴 ERROR CODE: ${item.error_code}\\n\\n`;\n\nif (item.error_description) {\n  response += `📝 BESCHREIBUNG:\\n${item.error_description}\\n\\n`;\n}\n\nif (item.solution_text) {\n  response += `🔧 LÖSUNG:\\n${formatSolution(item.solution_text)}\\n\\n`;\n} else {\n  response += `🔧 LÖSUNG:\\n⚠️ Keine Lösung verfügbar - siehe Context\\n\\n`;\n}\n\nif (item.context_text && item.context_text.trim()) {\n  const contextPreview = item.context_text.substring(0, 400).trim();\n  response += `📄 CONTEXT AUS MANUAL:\\n${contextPreview}${item.context_text.length > 400 ? '...' : ''}\\n\\n`;\n}\n\nif (images && images.length > 0) {\n  response += `🖼️ BILDER (${images.length}):\\n`;\n  images.forEach((img, idx) => {\n    response += `\\n${idx + 1}. ${img.url}\\n`;\n    if (img.description) {\n      response += `   📝 ${img.description}\\n`;\n    }\n    if (img.ocr_text && img.ocr_text.length > 0) {\n      const ocrPreview = img.ocr_text.substring(0, 100);\n      response += `   📄 OCR: ${ocrPreview}${img.ocr_text.length > 100 ? '...' : ''}\\n`;\n    }\n    if (img.match_method === 'smart_vision_ai') {\n      response += `   ✨ Smart Match: Vision AI erkannte Error Code\\n`;\n    } else if (img.match_method === 'page_match') {\n      response += `   📍 Gleiche Seite (${img.page_number})\\n`;\n    } else if (img.match_method === 'context_match') {\n      response += `   📄 Context (Seite ${img.page_number})\\n`;\n    }\n    if (img.confidence) {\n      response += `   📊 Confidence: ${(img.confidence * 100).toFixed(0)}%\\n`;\n    }\n  });\n  response += `\\n`;\n}\n\nresponse += `ℹ️ DETAILS:\\n`;\nif (item.document_name) response += `  📄 Dokument: ${item.document_name}\\n`;\nif (item.manufacturer) response += `  🏭 Hersteller: ${item.manufacturer}\\n`;\nif (item.series) response += `  📦 Serie: ${item.series}\\n`;\nif (item.page_number) response += `  📄 Seite: ${item.page_number}\\n`;\nif (item.confidence_score) response += `  📊 Confidence: ${(item.confidence_score * 100).toFixed(0)}%\\n`;\nif (item.severity_level) response += `  ⚠️ Severity: ${item.severity_level}\\n`;\nif (item.requires_technician) response += `  👨‍🔧 Techniker: Ja\\n`;\n\nreturn {\n  found: true,\n  error_code: item.error_code,\n  extracted_from: originalInput,\n  message: response,\n  images: images,\n  image_count: images.length,\n  raw_data: item\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "format-error",
      "name": "Format Error Code"
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [[{"node": "Extract Error Code", "type": "main", "index": 0}]]
    },
    "Extract Error Code": {
      "main": [[{"node": "Query Error Code", "type": "main", "index": 0}]]
    },
    "Query Error Code": {
      "main": [[{"node": "Format Error Code", "type": "main", "index": 0}]]
    }
  },
  "settings": {}
}
