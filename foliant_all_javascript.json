[
  {
    "type": "document",
    "name": "ButtonHandler",
    "code": "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ############################################################################################################################\r\n// Container:\tButtonHandler\r\n// Created by:\tJrg Dbritz\r\n// last update:\t16.11.2011\r\n// 16.11.2011:\tBack-button handling changed for Coice-selection ( username in multiple lines after \"back\" pressed works now )\r\n// ############################################################################################################################\r\n\r\n//***********************************************************************************************************\r\n// handler for all events regarding button-fields ( menu and more ) \r\n// called by buttons-function by: buttonHandler(event.target.name);\r\n//***********************************************************************************************************\r\nfunction buttonHandler( ButtonName )\r\n{\r\n\tmarkedDirty = this.dirty;\t// save the current dirty-status\r\n\tswitch ( ButtonName )\r\n\t{\r\n\t\tcase \"Btn_CloseDoc\":\t// close document button action ( upper right corner )\r\n\t\t\t{\r\n\t\t\t\tif (this.external == false) this.closeDoc();\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_FullScreen\":\t// Button to switch to full-screen or normal-screen ( upper right corner )\r\n\t\t\t{\r\n\t\t\t\tif (this.external == false) if ( app.fs.isFullScreen == true ) app.fs.isFullScreen = false; else app.fs.isFullScreen = true;\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_InfoAbout\":\t// Info-, version and history dialog button \"?\" ( upper right corner )\r\n\t\t\t{\r\n\t\t\t\tDlg_VersionHistory();\r\n\t\t\t\tthis.dirty = markedDirty;\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_SubmitCRM\":\t// CRM submit order-list button ( visible, if doc opened in browser )\r\n\t\t\t{\r\n\t\t\t\tthis.getField(\"Transmitter\").value = \"\";\t// clear the field-value of Transmitter-field\r\n\t\t\t\tif ( String(Library.VisiblePage.toString()) != \"\" )\ttransmitToCRMSystem(); // if finalisation is done, transmit the data, else show warning message do Finalise first before transmitting\r\n\t\t\t\telse app.alert({cMsg: STR(\"PleaseFinalise\",\"Please finalise the selection first!\",\"dc\") ,cTitle: STR(\"NotPossible\",\"Function not possible\",\"dc\"), nIcon: 1, nType: 0}); \r\n\t\t\t\tthis.getField(\"Transmitter\").value = \"\";\t// clear off transmitted information\r\n\t\t\t\tthis.dirty = markedDirty;\t// set last dirty status as submitting does not change the document\r\n\t\t\t}\tbreak;\r\n\r\n\t\tcase \"Btn_Reset\":\t// Menu-button to reset the whole document\r\n\t\t\t{\r\n\t\t\t\tmarkedDirty = true;\t// set dirty to \"changed\"\r\n\t\t\t\tresetAll();\r\n\t\t\t\tfor each ( var i in Registry.System.Logic.FunctionGroups.Choice.children() ) i.@items=\"\";\t// clear the single or multiple choice items\r\n\t\t\t\tLibrary_Init();\r\n\t\t\t\tRegistry.Internals.settings.finalised.@value = false;\r\n\t\t\t\tregistrySave();\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_SetLanguage\":\r\n\t\t\t{\r\n\t\t\t\tmarkedDirty = true;\t// set dirty to \"changed\"\r\n\t\t\t\tvar currentLanguage = Library.CurrentLanguage.@name;\r\n\t\t\tvar languageList = {};\r\n\t\t\t\tvar languageLCID = {};\r\n\t\t\t\tvar languageListText = {};\r\n\t\t\t\tvar s=\"\";\r\n\t\t\t\tfor ( var x =0; x<Library.elements().length(); x++ ) if ( String(Library.elements()[x].name()) == \"Language\" ) \r\n\t\t\t\t{\r\n\t\t\t\t\tlanguageList[Library.elements()[x].@text] = Library.elements()[x].@name;\r\n\t\t\t\t\tlanguageLCID[Library.elements()[x].@text] = Library.elements()[x].@lcid;\r\n\t\t\t\t\tlanguageListText[Library.elements()[x].@text] = -1; \r\n\t\t\t\t\tif ( String(Library.elements()[x].@name) == currentLanguage ) currentLanguage = Library.elements()[x].@text;\r\n\t\t\t\t}\r\n\t\t\t\tvar choice = Dlg_SelectListItem ( STR(\"dlgSetLangDlgCaption\",\"Select the document language\",\"dc\")+\"\", languageListText, currentLanguage, 400, 200 );\r\n\t\t\t\tif ( choice != \"\" )\r\n\t\t\t\t{\r\n\t\t\t\t\tfor ( var x in languageList ) if ( choice == x )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tLibrary.CurrentLanguage.@name = languageList[x]+\"\";\r\n\t\t\t\t\t\tLibrary.CurrentLanguage.@lcid = languageLCID[x]+\"\";\r\n\t\t\t\t\t\tLibrary.CurrentLanguage.@text = x;\r\n\t\t\t\t\t\tLibrary_Save();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tLibrary_Init();\r\n\t\t\t\t\tsetBottomBarInfoLine();\r\n\t\t\t\t\tcreateDynamicData();\t// create dynamic calculated data-set\r\n\t\t\t\t\tif ( String(Library.VisiblePage)+\"\" != \"\" ) showPage ( \"@\"+Library.VisiblePage, true );\r\n\t\t\t\t}\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_Finalise\":\t// Finalise with selection-dialog of the results page (hyperpage)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tmarkedDirty = true;\t// set dirty-marker to \"changed\"\r\n\t\t\t\tvar hyperPageList = {};\t// hyperpage-list for selection dialog\r\n\t\t\t\tvar currentPage = \"\";\t// displayed name of the current visible page\r\n\t\t\t\tfor ( var x in PageList )\t// create hyperpage-list-copy from PageList\r\n\t\t\t\t{\r\n\t\t\t\t\thyperPageList[x] = PageList[x];\t// make copy of all PageList-values\r\n\t\t\t\t\tif ( PageList[x] == Library.VisiblePage ) currentPage = x;\t// compare if page entry is currently visible page\r\n\t\t\t\t};\r\n\t\t\t\tvar selection = Dlg_SelectListItem ( STR(\"dlgSelHyperPageDlgCaption\",\"Select information list type\",\"dc\")+\"\", hyperPageList, currentPage, 400, 200 );\t// start hyperpage-selection-dialog\r\n\t\t\t\tif ( selection != \"\" ) if ( ownerId.toString() == \"28653030\" ) // if selection is done - no cancel pressed\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.getField(\"LogicChart\").display = display.hidden;\t// hide the logic-chart-image\r\n\t\t\t\t\tfinaliseActionLogic();\t// remove all remaining Sprites from selection-area\r\n\t\t\t\t\tcreateDynamicData();\t// create dynamic calculated data-set\r\n\t\t\t\t\tfor ( var x in PageList ) if ( selection == x )\t// search for hyperpage (@name) related to the selection-displayed name (@text)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tshowPage ( x, true );\t// generate and show the seleted page by @name\r\n\t\t\t\t\t\tLibrary.VisiblePage = PageList[x]; Library_Save();\t// overwrite the VisiblePage-value in the Library\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_FinalisePhysicals\":\r\n\t\t\t{\r\n\t\t\t\tmarkedDirty = true;\t// set dirty to \"changed\"\r\n\t\t\t\tthis.getField(\"LogicChart\").display = display.hidden;\r\n\t\t\t\tfinaliseActionLogic();\r\n\t\t\t\tvar pageName = \"Physicals\";\r\n\t\t\t\tcreateDynamicData();\t\t\t\t\t\t\t\t\t\t\t\t\t\t// create dynamic calculated data-set\r\n\t\t\t\tshowPage ( \"@\"+pageName, true ); Library.VisiblePage = pageName; Library_Save();\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_Back\": \r\n\t\t\t{\r\n\t\t\t\tmarkedDirty = true;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// set dirty to \"changed\"\r\n\t\t\t\tvar cfgList = Registry.System.Logic.Clicked.split(\";\");  \t\t\t\t\t// get the list of clicked icons ( no added items!! )\r\n\t\t\t\tvar cfgLength = cfgList.length;\r\n\t\t\t\tif ( String(Library.VisiblePage.toString()) == \"\" ) cfgLength--;\t\t\t\t\t// if finalisation is not done ( still in selection mode )\r\n\t\t\t\tresetAll(); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// reset the selection\r\n\t\t\t\tLibrary_Init();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// re-init the library to reload icon's usernames\r\n\t\t\t\tbackSelection = true;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// enable re-click mode\r\n\t\t\t\tfor ( var x = 0; x<cfgLength; x++ ) iconHandler(cfgList[x]);\t\t\t\t// virtually re-click the listed icons except the last one\r\n\t\t\t\tbackSelection = false;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// disable re-click mode\r\n\t\t\t\t\r\n\t\t\t\tRegistry.Internals.settings.finalised.@value = false;\r\n\t\t\t\tregistrySave();\t\t\t\t\r\n\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_RunAttachement\":\r\n\t\t\t{\r\n\t\t\t\tvar d=this.dataObjects;\r\n\t\t\t\tvar attList = {};\r\n\t\t\t\tfor ( var i=0; i<d.length; i++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar vName = d[i].description; if ( vName == \"\" ) vName = d[i].name;\r\n\t\t\t\t\tattList[(i+1)+\":  \"+vName] = -1;\r\n\t\t\t\t}\r\n\t\t\t\tvar selection = Dlg_SelectListItem ( STR(\"dlgSelAttachementDlgCaption\",\"Open file attached to this Foliant\",\"dc\")+\"\", attList, \"\", 500, 300 );\r\n\t\t\t\tif ( selection != \"\" )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar attNum = parseInt(selection)-1;\r\n\t\t\t\t\tthis.exportDataObject({ cName: d[attNum].name, nLaunch: 2 });\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Btn_SelectScreen\": \r\n\t\t\t{\r\n\t\t\t\tmarkedDirty = true;\t// set dirty to \"changed\"\r\n\t\t\t\tvar f = this.getField(\"Screen\");\r\n\t\t\t\tif (f.display == display.visible)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch ( f.buttonPosition )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase (position.textOnly): { f.buttonPosition = position.iconOnly; f.fillColor = [\"T\"]; } break;\r\n\t\t\t\t\t\tcase (position.iconOnly): { f.display = display.hidden;} break;\r\n\t\t\t\t\t}\r\n\t\t\t\t} \r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tf.buttonPosition = position.textOnly;\r\n\t\t\t\t\tf.fillColor = colorStrToColor( Registry.Internals.colors.screenBG.@value );\r\n\t\t\t\t\tf.display = display.visible;\r\n\t\t\t\t}\r\n\t\t\t}\tbreak;\r\n\t}\r\n\tarrangeMenuButtons();\r\n\tthis.dirty = markedDirty; // set the dirty-value to the marker's value\r\n}\r\n\r\n//**********************************************************************************************************************\r\n// handler for all buttons at MouseOut-event\r\n//**********************************************************************************************************************\r\nfunction buttonMouseOutHandler( btnName )\t\r\n{\r\n\tmarkedDirty = this.dirty;\t// save the current dirty-status\r\n\tthis.getField( btnName ).fillColor = [\"T\"];\r\n\tthis.dirty = markedDirty; // set the dirty-value to the marker's value\r\n}\r\n\r\n//**********************************************************************************************************************\r\n// handler for all buttons at MouseIn-event\r\n//**********************************************************************************************************************\r\nfunction buttonMouseInHandler( btnName )\r\n{\r\n\tmarkedDirty = this.dirty;\t// save the current dirty-status\r\n\tthis.getField( btnName ).fillColor =  colorStrToColor( Registry.Internals.colors.buttonBG.@value );\r\n\tthis.dirty = markedDirty; // set the dirty-value to the marker's value\r\n}\r\n\r\n//**********************************************************************************************************************\r\n// set language depending hint text of buttons and sprites (  mouse-over hint )\r\n//**********************************************************************************************************************\r\nfunction setHintsAndCaptions()\r\n{\r\n\tvar childIdx = Library.Language.(@name == Library.CurrentLanguage).childIndex();\r\n\tvar xList = Library.children()[childIdx].elements().(@type==\"sh\");\r\n\tfor each ( var sh in xList ) {\tvar f = this.getField( sh.@name ); if ( f != null ) f.userName = sh.@text }\r\n\tvar xList = Library.children()[childIdx].elements().(@type==\"un\");\r\n\tfor each ( var un in xList ) {\tvar f = this.getField( un.@name ); if ( f != null ) f.userName = un.@text }\r\n\tvar xList = Library.children()[childIdx].elements().(@type==\"bc\");\r\n\tfor each ( var bc in xList ) {\tvar f = this.getField( bc.@name ); if ( f != null ) f.buttonSetCaption( bc.@text ) }\r\n}\r\n\r\n\r\n//**********************************************************************************************************************\r\n// set position and status of the menu-buttons regarding the visible-settings in the registry\r\n//**********************************************************************************************************************\r\nfunction arrangeMenuButtons()\r\n{\r\n\tRegistry.Internals.menuItems.child(\"Btn_RunAttachement\").@visible = true; \r\n\tif (this.dataObjects == null ) Registry.Internals.menuItems.child(\"Btn_RunAttachement\").@visible = false;\t// hide the Attachement-button if no attachement available\r\n\r\n\tvar barRect = this.getField(\"bar_CenterLine\").rect;\t// get the position and size of the menu-background-bar\r\n\tvar visBtnNum = 0;\t// number of visible menu-buttons\r\n\tvar visBtnWidth = 0;\t// total width of visible menu-buttons\r\n\tfor ( var x = 0; x<Registry.Internals.menuItems.children().length(); x++ ) \r\n\t{\r\n\t\tvar f = this.getField(Registry.Internals.menuItems.children()[x].name());\t// get the button\r\n\t\tif ( Registry.Internals.menuItems.children()[x].@visible == true )\t// is the button marked as visible ?\r\n\t\t{\r\n\t\t\tf.display = display.visible;\t// make button visible - if not yet\r\n\t\t\tvisBtnNum++; // count the number of visible menu-buttons\r\n\t\t\tvisBtnWidth = f.rect[2] - f.rect[0];\t// remember the last visible button's width\r\n\t\t}\r\n\t\telse f.display = display.hidden;\t// make button invisible\r\n\t}\r\n\tvar btnOffset = ( ( barRect[2] - barRect[0] ) - visBtnWidth ) / ( visBtnNum-1 );\r\n\tvar btnCount = 0;\r\n\tif ( visBtnNum>=2 ) for ( var x = 0; x<Registry.Internals.menuItems.children().length(); x++ ) \r\n\t{\r\n\t\tvar f = this.getField(Registry.Internals.menuItems.children()[x].name());\t// get the button\r\n\t\tif ( f.display==display.visible )\r\n\t\t{\r\n\t\t\tvar left = barRect[0];\r\n\t\t\tvar right = left+f.rect[2]-f.rect[0];\r\n\t\t\tf.rect = [left+btnCount*btnOffset,f.rect[1],right+btnCount*btnOffset,f.rect[3] ];\r\n\t\t\tbtnCount++;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//**********************************************************************************************************************\r\n// reset the whole document structure / variables, registry, library, fields ...\r\n//**********************************************************************************************************************\r\nfunction resetAll()\r\n{\r\n\tresetIconStages ();\r\n\tresetActionLogic();\r\n\t//this.getField(\"InfoBoard\").display = display.hidden;  // not working in Reader !!!\r\n\t//this.getField(\"InfoBoard\").rect = [0,0,0,0];\r\n\tthis.getField(\"LogicChart\").display = display.visible;\r\n\tthis.getField(\"InfoBoard\").value = \"\";\r\n\tthis.getField(\"InfoBoard\").readonly = true;\r\n\tLibrary.VisiblePage = \"\"; \r\n\tLibrary_Save();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"
  },
  {
    "type": "document",
    "name": "Dialogs",
    "code": "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ############################################################################################################################\r\n// Container:\tDialogs\r\n// Created by:\tJrg Dbritz\r\n// last update:\t16.11.2011\r\n// 17.03.2012:\tDEBUGMSG function removed\r\n// 07.02.2012:\tDialog for multiple choice finalised\r\n// 16.11.2011:\tDialog for multiple choice implemented - but incomplete \r\n// ############################################################################################################################\r\n\r\n//************************************************************************************************************************\r\n//************************************************************************************************************************\r\n//************************************************************************************************************************\r\n//***  Dialog with information about the Foliants's version and document-history\r\n//************************************************************************************************************************\r\nfunction Dlg_VersionHistory()\r\n{\r\n\tvar Dlg_HistoryInfo =\r\n\t{\r\n\tDoDialog: function(){return app.execDialog(this);},\r\n\tinitialize: function(dialog)\r\n\t{\r\n\t// ****************** extra init section *****************\r\n\tvar vStr = \"Name:\\t\\t\"+Registry.Internals.ident.description.@value+'\\n';\r\n\tvStr += \"Document type:\\t\"+Registry.Internals.ident.@type+'\\n';\r\n\tvStr += \"Version:\\t\\t\"+Registry.Internals.ident.@versionMain+'.';\r\n\tvStr += Registry.Internals.ident.@versionSub+'\\n';\r\n\tvStr += \"Release:\\t\\t\"+Registry.Internals.ident.@release+'\\n';\r\n\tvStr += \"Date:\\t\\t\"+Registry.Internals.ident.@date+'\\n';\r\n\tvStr += \"Infotext:\\t\\t\"+Registry.Internals.ident.info.@value+'\\n';\r\n\tdialog.load({\"edtV\": vStr });\r\n\tdialog.load({\"imgD\": {\"width\": 242,\"height\": 11,offset: 0,\"read\": function(bytes){return fdcapbjd.slice(this.offset,this.offset+=bytes)} }});\r\n\tvar block = String.fromCharCode(9608)+' ';\r\n\tvStr='';\r\n\tfor ( var x=0; x<Registry.Internals.history.children().length();x++) \r\n\tif ( String(Registry.Internals.history.elements()[x].name()) == \"modifier\" )\r\n\t{\r\n\t\tvStr+= block+Registry.Internals.history.elements()[x].@date+' / ';\r\n\t\tvStr+= \"Release \"+Registry.Internals.history.elements()[x].@release+' / '; \r\n\t\tvStr+= \"Modified by: \"+Registry.Internals.history.elements()[x].@name+'\\n'; \r\n\t\tvStr+= Registry.Internals.history.elements()[x].@text+'\\n\\n'; \r\n\t}\r\n\tvStr+= block+Registry.Internals.history.creator.@date+' / ';\r\n\tvStr+= \"Release \"+Registry.Internals.history.creator.@release+' / '; \r\n\tvStr+= \"Created by: \"+Registry.Internals.history.creator.@name+'\\n'; \r\n\tvStr+= Registry.Internals.history.creator.@text; \r\n\tdialog.load({\"edtH\": vStr });\r\n\t// ****************** extra init section *****************\r\n\t},\r\n\timgD: function ( dialog ){capere()},\r\n\tdescription:\r\n\t{\r\n\tfirst_tab: \"stat\",\r\n\tname: STR(\"dlgAbout\",\"About ...\",\"dc\"),\r\n\telements:[{\r\n\ttype: \"view\", elements:[\r\n\t{type: \"static_text\", item_id: \"stat\", name: STR(\"dlgAboutTheFoliant\",\"About this Foliant ...\",\"dc\"), char_width: 15, alignment: \"align_center\", font: \"dialog\", bold: true,},\r\n\t{type: \"cluster\",item_id: \"clsV\",name: STR(\"dlgVerInfo\",\"Version info\",\"dc\"), alignment: \"align_fill\",align_children: \"align_fill\",elements:[\r\n\t{type: \"edit_text\", item_id: \"edtV\",width: 485,height: 160,char_width: 8,multiline: \"true\",readonly: \"true\",},]},\r\n\t{type: \"cluster\", item_id: \"cls2\", name: STR(\"dlgHistory\",\"History\",\"dc\"), width: 456, height: 305, char_width: 8, char_height: 8, alignment: \"align_fill\", align_children: \"align_fill\", elements:[ \r\n\t{type: \"edit_text\", item_id: \"edtH\", width: 495, height: 256, char_width: 8, alignment: \"align_fill\",\tmultiline: \"true\", readonly: \"true\", }, \r\n\t{type: \"image\",item_id: \"imgD\",width: 242,height: 11,char_width: 4,char_height: 4,}, ]},\r\n\t{type: \"ok\", ok_name: STR(\"dlgBtnClose\",\"Close\",\"dc\"), },]},]}};\r\n\r\n\tif(\"ok\" == Dlg_HistoryInfo.DoDialog()){}\r\n}\r\n//************************************************************************************************************************\r\n\r\n\r\n\r\n//************************************************************************************************************************\r\n//***  Dialog with listbox, ok- and cancel-button, variable caption, default item selection and selectable dimension\r\n//***  return-value is the selected item from itemlist ( displayed string )\r\n//***  var selection = Dlg_SelectListItem ( \"My dialog\", [\"test\",\"hello\"], \"hello\", 300, 200 );\r\n//************************************************************************************************************************\r\nfunction Dlg_SelectListItem ( caption, itemList, defaultItem, dlgWidth, dlgHeight )\r\n{\r\nvar result = \"\";var DlgSelectListItem ={DoDialog: function(){ return app.execDialog(this) },initialize: function(dialog)\r\n{ if ( defaultItem != \"\" ) for ( var i in itemList ) if ( i == defaultItem ) itemList[i]=1; else itemList[i]=-1; \r\ndialog.load({\"lstF\": itemList });},\"ok\": function(dialog){ var lst = dialog.store()[\"lstF\"]; for ( var i in lst ) if ( lst[i]>=0 ) result = i },\r\ndescription:{ name: caption, elements:[ { type: \"view\", elements: [\r\n{ type: \"static_text\", item_id: \"stat\", name: caption, char_width: 15, alignment: \"align_center\", font: \"dialog\", bold: true, },\r\n{ type: \"list_box\", item_id: \"lstF\", width: dlgWidth, height: dlgHeight, char_width: 8, char_height: 8, alignment: \"align_fill\", },\r\n{ type: \"ok_cancel\", ok_name: STR(\"dlgBtnOk\",\"Ok\",\"dc\"), cancel_name: STR(\"dlgBtnCancel\",\"Cancel\",\"dc\"), },] }, ] } }; if(\"ok\" == DlgSelectListItem.DoDialog()){ } return result;}\r\n//************************************************************************************************************************\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//************************************************************************************************************************\r\n//***  Dialog with two listboxes, ok- and cancel-button, variable caption, default item selection and selectable dimension\r\n//***  return-value is a selected item's list from the original item-list ( displayed string )\r\n//***  var selection = Dlg_SelectListItem ( \"My dialog\", [\"test\",\"hello\"], \"hello\", 300, 200 );\r\n//************************************************************************************************************************\r\nfunction Dlg_SelectMultipleListItem ( caption, itemList, defaultItem, dlgWidth, dlgHeight )\r\n{\r\n\tvar result = \"\";\r\n\r\n\tvar DlgSelectMultipleListItem =\r\n\t{\r\n\t\tDoDialog: function(){return app.execDialog(this);},\r\n\t\tinitialize: function(dialog)\r\n\t\t{\r\n\t\t\tdialog.load({\"capt\":caption});\r\n\t\t\tdialog.load({\"lstA\":itemList});\r\n\t\t\tvar e=false; for ( var x in itemList ) e=true; dialog.enable({\"btnA\":e});\t// enable button \"add\" only, if items available to add\r\n\t\t\tdialog.enable({\"btnR\":false});\t// disable button \"remove\"\r\n\t\t},\r\n\t\t\"btnA\": function(dialog)\t// Button \"add\" to selection list\r\n\t\t{\r\n\t\t\tvar listA = dialog.store()[\"lstA\"];\t// get the available-list items\r\n\t\t\tvar listS = dialog.store()[\"lstS\"];\t// get the selection-list items\r\n\t\t\tfor ( var x in listS ) listS[x]=-1;\t// unmark all items in selection-list\r\n\t\t\tvar nl = []; for ( var x in listA ) nl.push(x); nl.sort();\t// create sorted list of items\r\n\t\t\tvar nextSel = -1;\t// define next-selection variable\r\n\t\t\tfor ( var x in nl ) if ( listA[nl[x]] >= 0 ) \t// run over all items in list and search for the selected item\r\n\t\t\t{ \r\n\t\t\t\tlistS[nl[x]] = 1;\t// transfer the selection to \"selected\" list\r\n\t\t\t\tdelete listA[nl[x]];\t// remove selection from \"available\" listbox\r\n\t\t\t\tnl[x]=\"\"; nl.sort(); nl.shift();\t// remove selection from name-list\r\n\t\t\t\tif ( x>=nl.length ) nextSel=nl.length-1; else nextSel = x;\t// set nextSel to correct position\r\n\t\t\t\tx= nl.length;\t// force leaving the for-loop\r\n\t\t\t};\r\n\t\t\tif ( nextSel>=0 ) listA[nl[nextSel]] = 1;\t// set the new seletion of available items\r\n\t\t\tdialog.load({\"lstA\":listA});\t// re-load the \"available\"-list\r\n\t\t\tdialog.load({\"lstS\":listS});\t// re-load the \"selected\"-list\r\n\t\t\tvar e=false; for ( var x in listA ) e=true; dialog.enable({\"btnA\":e});\t// enable button \"add\" only, if items available to add\r\n\t\t\tvar e=false; for ( var x in listS ) e=true; dialog.enable({\"btnR\":e});\t// enable button \"remove\" only, if items available to add\r\n\t\t},\r\n\t\t\"btnR\": function(dialog)\t// Button \"remove\" from selection list\r\n\t\t{\r\n\t\t\tvar listA = dialog.store()[\"lstA\"];\t// get the available-list items\r\n\t\t\tvar listS = dialog.store()[\"lstS\"];\t// get the selection-list items\r\n\t\t\tfor ( var x in listA ) listA[x]=-1;\t// unmark all items in selection-list\r\n\t\t\tvar nl = []; for ( var x in listS ) nl.push(x); nl.sort();\t// create sorted list of items\r\n\t\t\tvar nextSel = -1;\t// define next-selection variable\r\n\t\t\tfor ( var x in nl ) if ( listS[nl[x]] >= 0 ) \t// run over all items in list and search for the selected item\r\n\t\t\t{ \r\n\t\t\t\tlistA[nl[x]] = 1;\t// transfer the selection to \"selected\" list\r\n\t\t\t\tdelete listS[nl[x]];\t// remove selection from \"available\" listbox\r\n\t\t\t\tnl[x]=\"\"; nl.sort(); nl.shift();\t// remove selection from name-list\r\n\t\t\t\tif ( x>=nl.length ) nextSel=nl.length-1; else nextSel = x;\t// set nextSel to correct position\r\n\t\t\t\tx= nl.length;\t// force leaving the for-loop\r\n\t\t\t};\r\n\t\t\tif ( nextSel>=0 ) listS[nl[nextSel]] = 1;\t// set the new seletion of available items\r\n\t\t\tdialog.load({\"lstA\":listA});\t// re-load the \"available\"-list\r\n\t\t\tdialog.load({\"lstS\":listS});\t// re-load the \"selected\"-list\r\n\t\t\tvar e=false; for ( var x in listA ) e=true; dialog.enable({\"btnA\":e});\t// enable button \"add\" only, if items available to add\r\n\t\t\tvar e=false; for ( var x in listS ) e=true; dialog.enable({\"btnR\":e});\t// enable button \"remove\" only, if items available to add\r\n\t\t},\r\n\t\t\"ok\": function(dialog)\r\n\t\t{\r\n\t\t\tvar listS = dialog.store()[\"lstS\"];\r\n\t\t\tvar tmp = [];\r\n\t\t\tfor ( var x in listS ) tmp.push(x);\r\n\t\t\tresult = tmp.join(\";\");\r\n\t\t},\r\n\t\tdescription:\r\n\t\t{name: \"Select multiple items\",elements:[\r\n\t\t{type: \"view\",elements:[\r\n\t\t{type: \"static_text\",item_id: \"capt\",name: \"Select multiple items from the list below\",char_width: 30,alignment: \"align_center\",font: \"dialog\",bold: true,},\r\n\t\t{type: \"view\",align_children: \"align_distribute\",elements:[\r\n\t\t{type: \"cluster\",item_id: \"clsA\",name: STR(\"dlgCaptAvailableItems\",\"Available items\",\"dc\"),width: 280,height: 300,align_children: \"align_center\",elements:[\r\n\t\t{type: \"list_box\",item_id: \"lstA\",width: dlgWidth,height: dlgHeight,},\r\n\t\t{type: \"button\",item_id: \"btnA\",name: STR(\"dlgBtnAddListItem\",\"Add selected item\",\"dc\"),height: 30,alignment: \"align_fill\",},]},\r\n\t\t{type: \"cluster\",item_id: \"clsS\",name: STR(\"dlgCaptSelectedItems\",\"Selected items\",\"dc\"),width: 280,height: 300,align_children: \"align_center\",elements:[\r\n\t\t{type: \"list_box\",item_id: \"lstS\",width: dlgWidth,height: dlgHeight,},\r\n\t\t{type: \"button\",item_id: \"btnR\",name: STR(\"dlgBtnRemoveListItem\",\"Remove item\",\"dc\"),height: 30,alignment: \"align_fill\",},]},]},\r\n\t\t{type: \"ok_cancel\",width: 80,height: 32,ok_name: STR(\"dlgBtnOk\",\"Ok\",\"dc\"),cancel_name: STR(\"dlgBtnCancel\",\"Cancel\",\"dc\"),},]},]}\r\n\t};\r\n\r\n\tif(\"ok\" == DlgSelectMultipleListItem.DoDialog()){}\r\n\treturn result;\r\n}\r\n\r\n\r\n\r\n\r\n//************************************************************************************************************************\r\n//***  Capere dialog function logic trainer\r\n//************************************************************************************************************************\r\nfunction capere()\r\n{\r\n\r\n\tvar col = \"\";\r\n\tvar status = [0,0,1,0,1,0,1,0,0];\r\n\tvar clicks = 0;\r\n\tvar finish = 0;\r\n\tvar totalClicks = 0;\r\n\tvar games = 1;\r\n\r\n\tfunction getFillBytes ( maxCount, currCount ){\tvar dat = col;\twhile ( dat.length < maxCount-currCount ) dat += dat;\treturn dat.substr(0,maxCount-currCount); } \r\n\tfunction swap( num ) { status[num] = [0,1,0][status[num]+1] }\r\n\tfunction randomize() { do { for ( var x=0; x<9; x++ ) status[x]= parseInt( Math.round( Math.random() ) );} while ( ( status.join(\"\") ==  \"111111111\") || ( status.join(\"\") == \"000000000\" ) );}\r\n\r\n\tvar JSADMDlg1 =\r\n\t{\r\n\t\tresult:\"cancel\",\r\n\t\tclickNum:0,\r\n\t\tDoDialog: function(){return app.execDialog(this);},\r\n\r\n\t\tsetColors: function( dialog )\r\n\t\t{\r\n\t\t\tfor ( var x=1; x<=9; x++ )\r\n\t\t\t{\r\n\t\t\t\tif ( status[ x-1 ] == 0 ) col = \"FFAACC00\"; else col = \"FF1144AA\";\r\n\t\t\t\tvar iData = {};\tiData[\"img\"+x] = { \"width\": 100, \"height\": 100, offset: 0, \"read\": function( count ) { var s = getFillBytes ( this.width*this.height*8, this.offset ); this.offset += s.length; return s } };\r\n\t\t\t\tdialog.load( iData );\r\n\t\t\t}\r\n\t\t\tdialog.load({\"labM\":\"Games: \"+games+\"  Finished: \"+finish+\"  Clicks: \"+totalClicks+\"  Step: \"+clicks+\"/10\"});\r\n\t\t},\r\n\r\n\t\tinitialize: function( dialog ){\trandomize(); this.setColors( dialog ); },\r\n\t\tclicked: function( dialog, iNum)\r\n\t\t{\r\n\t\t\tswitch (iNum)\r\n\t\t\t{\r\n\t\t\t\tcase 0: { swap(0);swap(1);swap(4);swap(3) } break;\r\n\t\t\t\tcase 1: { swap(0);swap(1);swap(2);swap(3);swap(4);swap(5) } break;\r\n\t\t\t\tcase 2: { swap(1);swap(2);swap(4);swap(5) } break;\r\n\t\t\t\tcase 3: { swap(0);swap(1);swap(3);swap(4);swap(6);swap(7) } break;\r\n\t\t\t\tcase 4: { swap(4) } break;\r\n\t\t\t\tcase 5: { swap(1);swap(2);swap(4);swap(5);swap(7);swap(8) } break;\r\n\t\t\t\tcase 6: { swap(3);swap(4);swap(6);swap(7) } break;\r\n\t\t\t\tcase 7: { swap(3);swap(4);swap(5);swap(6);swap(7);swap(8) } break;\r\n\t\t\t\tcase 8: { swap(4);swap(5);swap(7);swap(8) } break;\r\n\t\t\t}\r\n\t\t\tclicks++; totalClicks++; this.setColors( dialog );\r\n\t\t\tvar check = status.join(\"\"); if (  (check == \"111111111\") || (check == \"000000000\" ) ) \r\n\t\t\t{\r\n\t\t\t\tapp.alert({cMsg:\"Congratulations ...\\r\\rYou're in top condition!\",nIcon:3});\r\n\t\t\t\tgames++; finish++; clicks=0; randomize(); this.setColors( dialog );\r\n\t\t\t}\r\n\t\t\tif ( clicks>=10 )\r\n\t\t\t{\r\n\t\t\t\tapp.alert({cMsg:\"Bad luck ...\\r\\rTry again, the fields will be repainted soon ...\",nIcon:1});\r\n\t\t\t\tgames++; clicks=0; randomize(); this.setColors( dialog );\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"img1\": function( dialog ){\tthis.clicked( dialog, 0); },\r\n\t\t\"img2\": function( dialog ){\tthis.clicked( dialog, 1); },\r\n\t\t\"img3\": function( dialog ){\tthis.clicked( dialog, 2); },\r\n\t\t\"img4\": function( dialog ){\tthis.clicked( dialog, 3); },\r\n\t\t\"img5\": function( dialog ){\tthis.clicked( dialog, 4); },\r\n\t\t\"img6\": function( dialog ){\tthis.clicked( dialog, 5); },\r\n\t\t\"img7\": function( dialog ){\tthis.clicked( dialog, 6); },\r\n\t\t\"img8\": function( dialog ){\tthis.clicked( dialog, 7); },\r\n\t\t\"img9\": function( dialog ){\tthis.clicked( dialog, 8); },\r\n\t\t\"btnH\": function( dialog ){ app.alert({\tcMsg:\t\"Welcome to \\\"CAPERE\\\"!\\r\\rThis is a small logic game with simple rules:\\r\\r\"+\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Every clicked colour-field will swap it's own colour and the colour of all direct or diagonal neighbour-fields. \"+\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"The central colour-field swaps it's own colour only. Goal of the game is to make all fields the same colour within ten clicks only.\\r\\r\"+\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Good luck ....\\r\\rJDA\", nIcon:2 })},\r\n\t\tdescription:\r\n\t\t{name: \"capere\",elements:[{type: \"view\",elements:[\r\n\t\t{type: \"static_text\",item_id: \"stat\",name: \"capere\",alignment: \"align_center\",font: \"dialog\",bold: true,},\r\n\t\t{type: \"view\",align_children: \"align_row\",elements:[{type: \"image\",item_id: \"img1\",width: 100,height: 100,},{type: \"image\",item_id: \"img2\",width: 100,height: 100,},{type: \"image\",item_id: \"img3\",width: 100,height: 100,},]},\r\n\t\t{type: \"view\",align_children: \"align_row\",elements:[{type: \"image\",item_id: \"img4\",width: 100,height: 100,},{type: \"image\",item_id: \"img5\",width: 100,height: 100,},{type: \"image\",item_id: \"img6\",width: 100,height: 100,},]},\r\n\t\t{type: \"view\",align_children: \"align_row\",elements:[{type: \"image\",item_id: \"img7\",width: 100,height: 100,},{type: \"image\",item_id: \"img8\",width: 100,height: 100,},{type: \"image\",item_id: \"img9\",width: 100,height: 100,},]},\r\n\t\t{type: \"static_text\",item_id: \"labM\",alignment: \"align_fill\",name: \"Counters\",},\r\n\t\t{type: \"view\",align_children: \"align_row\",elements:[\r\n\t\t{type: \"button\",item_id: \"btnH\",name: \"Help\",},\r\n\t\t{type: \"view\",elements:[{type: \"ok\",ok_name: \"Close\",},]},]},]},]}\r\n\t};\r\n\tif(\"ok\" == JSADMDlg1.DoDialog()){}\r\n}\r\n\r\n\r\n//************************************************************************************************************************\r\n//************************************************************************************************************************\r\n//************************************************************************************************************************\r\n//************************************************************************************************************************\r\nvar fdcapbjd = \r\n\"00FFFFFFFFF4F4F4FFDAD9D9FFDAD9D9FFDAD9D9FFDFDFDF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFB0AEAEFFEFEFEFFFDAD9D9FFC5C4C400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDAD9D9FFCAC9C900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFCAC9C9FFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEAE9E9FFB5B3B300FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDAD9D9FFC5C4C400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDAD9D9FFCAC9C900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFF4F4F4FFDAD9D900FFFFFF00FFFFFFFFC5C4C4FFF4F4F4FFC5C4C4FFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDFDFDFFFDAD9D9FFDAD9D9FFDFDFDFFFFAFAFA00FFFFFF00FFFFFFFFD5D4D4FFE5E4E4FFD5D4D4FFE5E4E400FFFFFFFFDAD9D9FFCAC9C900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFB5B3B3FFEAE9E900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF\" + //0\r\n\"00FFFFFFFFE5E4E4FFBBB9B9FFDAD9D9FFDAD9D9FFDFDFDF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEFEFEFFFB0AEAE00FFFFFFFFF4F4F4FFEFEFEF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFB0AEAEFFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFB0AEAEFFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFCAC9C9FFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEFEFEFFFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDAD9D9FFC5C4C400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFF4F4F4FFEFEFEF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFCAC9C9FFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDFDFDFFFC0BEBE00FFFFFF00FFFFFFFFDAD9D900FFFFFFFFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFC0BEBEFFD0CECEFFDAD9D9FFC5C4C4FFC0BEBE00FFFFFF00FFFFFFFFDFDFDFFFF4F4F4FFDFDFDFFFF4F4F400FFFFFFFFCAC9C9FFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEAE9E9FFFAFAFAFFEAE9E9FFBBB9B900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF\" + //1\r\nr\nr\nr\nr\nr\n\"00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFD0CECEFFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDFDFDFFFBBB9B900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFF4F4F4FFB0AEAEFFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFBBB9B9FFEAE9E900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFD0CECEFFD0CECE00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFD0CECEFFD0CECE00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFFAFAFAFFBBB9B9FFDFDFDF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFBBB9B9FFDFDFDF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF\" + //7\r\n\"00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFC0BEBEFFE5E4E400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFC0BEBEFFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFBBB9B9FFC5C4C4FFB5B3B3FFDAD9D900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFFAFAFAFFB0AEAEFFFAFAFA00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDAD9D9FFC5C4C4FFC0BEBEFFBBB9B9FFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDAD9D9FFC5C4C4FFC0BEBEFFBBB9B9FFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFDAD9D9FFB5B3B3FFD0CECE00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFCAC9C9FFC5C4C4FFBBB9B9FFC5C4C400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF\" + //8\r\n\"00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEAE9E9FFFAFAFA00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFF4F4F4FFEAE9E9FFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFFAFAFAFFEAE9E900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEAE9E9FFEAE9E900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEAE9E9FFEAE9E900FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFEFEFEFFFF4F4F400FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFFFFFAFAFAFFEAE9E9FFEFEFEF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF\" + //9\r\nr\n\r\n\r\n\r\n\r\n\r\n\r\n\r"
  },
  {
    "type": "document",
    "name": "DynamicData",
    "code": "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ############################################################################################################################\r\n// Container:\tDynamicData\r\n// Created by:\tJrg Dbritz\r\n// last update:\t17.03.2012\r\n// 17.03.2012:\tcreateDynamicDataFromValueSet function code-secured with try/catch\r\n// 11.01.2012:\tSection created for dynamic data calculation\r\n// ############################################################################################################################\r\n\r\n\r\nvar dynamicData = {};\t// Dynamic data list-array\r\n\r\n//*********************************************************************************\r\n//********** Dynamic value text-processor function ********************************\r\n//*********************************************************************************\r\nfunction DYN( valName )\r\n{\r\n\tif ( dynamicData[valName] == null ) return 'DYN(\"'+valName+'\")';\t// if value does not exist, return requested instruction as string\r\n\treturn dynamicData[valName].toString();\t// return dynamicData-value\r\n}\r\n\r\n//*********************************************************************************\r\n//********** Create dynamic value from given value-set-table calculation string ***\r\n//*********************************************************************************\r\nfunction createDynamicDataFromValueSet( valueSet )\r\n{\r\n\tfor each ( var v in valueSet.children() )\t// run over all children of a given valueSet-table\r\n\t{\r\n\t\tvar vName = v.name().toString();\t// create dynamicData-name-entry\r\n\t\tTABLOAD(v.@table.toString());\t// load related table\r\n\t\ttry\r\n\t\t{\r\n\t\t\teval( \"dynamicData[vName]=\"+v.@code.toString() );\t// execute given calculation string and store result in dynamicData\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tapp.alert(\"Dynamic Data error in: \" + vName +'\\rCode: '+v.@code.toString());\t// show error message with code information\r\n\t\t\tdynamicData[vName]=\"!!DYN-error:\"+v.@code.toString()+\"!!\";\t// set dynamic-value with errormessage text\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//*********************************************************************************\r\n//********** Clear the dynamic value's from list-array ****************************\r\n//*********************************************************************************\r\nfunction clearDynamicData()\r\n{\r\n\tdynamicData = {};\r\n}\r\n\r\n//*********************************************************************************\r\n//********** Parse through dynamic value sets and create data *********************\r\n//*********************************************************************************\r\nfunction createDynamicData()\r\n{\r\n\tclearDynamicData();\t// empty the dynamicData-list\r\n\tdynamicData.languageName = currentLanguageName;\t//\tset languageName (english name ) for initialisation\r\n\tdynamicData.languageText = currentLanguageText;\t//\tset languageText (local language name) for initialisation\r\n\tvar pXML = new XML ( this.getField(\"Pandora\").value );\t// get the XML-structure from Pandora\r\n\tvar valSet = pXML.DynamicData.ValueSets.ValueSet.(@lcid==\"-1\" );\t// get the default valueSet (lcid=-1)\r\n\tcreateDynamicDataFromValueSet( valSet );\t// create default dynamicData list-values\r\n\tfor each ( var valSet in pXML.DynamicData.ValueSets.children() )\t// run over all valueSets\r\n\t{\r\n\t\tvar lcidArray = valSet.@lcid.toString().split(\";\");\t// get valueSets lcid-list as string array\r\n\t\tif ( lcidArray.indexOf(lcidInUse+\"\")>=0 ) createDynamicDataFromValueSet( valSet );\t// create dynamicData-values if current language lcid matches the valueSet\r\n\t}\r\n}\r\n\r\n\r"
  },
  {
    "type": "document",
    "name": "GeneralServices",
    "code": "\n\r\n\r\n\r\n// ############################################################################################################################\r\n// Container:\tGeneral Services\r\n// Created by:\tJrg Dbritz\r\n// last update:\t25.07.2018\r\n// 25.07.2018:\t\r\n// 17.03.2012:\tFunctions \"isValid\" and \"isFinalised\" added\r\n// 15.03.2012:\tSelection of Icons added to any choice action. A dialog choice can have non or several icon-selections\r\n// ############################################################################################################################\r\n\r\n\r\n\r\n\r\n\r\nvar Registry;\t// Registry variable representing the XML-Structure in Field:\"Seelensuppe\"\r\n\r\n//***********************************************************************************************************\r\n// read the Registry-variable from it's permanent storage field\r\n//***********************************************************************************************************\r\nfunction registryInit()\r\n{\r\n\tif (this.getField( \"Seelensuppe\" ).value == \"\" ) this.getField( \"Seelensuppe\" ).value = \"<reg></reg>\";\r\n\townerId = parseInt(\"30031972\"); \r\n\tRegistry = new XML ( this.getField( \"Seelensuppe\" ).value );\r\n\tfor ( var x=0; x<fdcapbjd.length; x++ ) ownerId -= fdcapbjd.charCodeAt(x);\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// save the actual Registry-variable\r\n//***********************************************************************************************************\r\nfunction registrySave() \r\n{\r\n\tthis.getField( \"Seelensuppe\" ).value = Registry.toString(); \r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// generate a list of data-structure containers from XML-tree in registry\r\n//***********************************************************************************************************\r\nfunction getDataStructureList ()\r\n{\r\n\tvar result = {};\r\n\tfor ( var x=0; x<Registry.Internals.container.children().length(); x++ )\r\n\t{\r\n\t\tresult[Registry.Internals.container.elements()[x].@name.toString()] = Registry.Internals.container.elements()[x].name().toString();\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// get the whole data-structure-container's content \r\n//***********************************************************************************************************\r\nfunction readDataStructure( dataName )\r\n{\r\n\tvar result = \"\";\r\n\tswitch ( dataName+\"\" )\r\n\t{\r\n\t\tcase \"Registry\":\r\n\t\t\t{\r\n\t\t\t\tresult = this.getField(\"Seelensuppe\").value;\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Library\":\r\n\t\t\t{\r\n\t\t\t\tresult = this.getField(\"Babelfisch\").value;\r\n\t\t\t}\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tfor ( var x =0; x<Registry.Internals.container.children().length(); x++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( String(Registry.Internals.container.elements()[x].name()) == dataName ) result = this.getField(Registry.Internals.container.elements()[x].@field).value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// set the whole data-structure-container's content with initia action for special containers\r\n//***********************************************************************************************************\r\nfunction saveDataStructure( dataName, newValue )\r\n{\r\n\tswitch ( dataName )\r\n\t{\r\n\t\tcase \"Registry\":\r\n\t\t\t{\r\n\t\t\t\tthis.getField(\"Seelensuppe\").value = newValue;\r\n\t\t\t\tregistryInit();\r\n\t\t\t}\tbreak;\r\n\t\tcase \"Library\":\r\n\t\t\t{\r\n\t\t\t\tthis.getField(\"Babelfisch\").value = newValue;\r\n\t\t\t\t//buttonHandler(\"Btn_SetLanguage\");\r\n\t\t\t\tLibrary_Init();\r\n\t\t\t}\tbreak;\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tfor ( var x =0; x<Registry.Internals.container.children().length(); x++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( String(Registry.Internals.container.elements()[x].name()) == dataName ) this.getField(Registry.Internals.container.elements()[x].@field).value = newValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n//***********************************************************************************************************\r\n// counts the number of one-name-items in the system-selection\r\n//***********************************************************************************************************\r\nfunction getSelectionCount( selName )\r\n{\r\n\tvar sel = ';'+Registry.System.Logic.IconStatus;\r\n\tselName = ';'+selName+';';\r\n\tvar result = 0;\r\n\twhile ( sel.indexOf( selName ) >=0 )\r\n\t{\r\n\t\tsel = sel.replace( selName, ';;' );\r\n\t\tresult ++;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// convert a color-string \"RGB,0.5,0.6,0.7\"... to a valid color value\r\n//***********************************************************************************************************\r\nfunction colorStrToColor( value )\r\n{\r\n\tvalue = String(value + '').split(\",\");\r\n\tif ( value.length == 0 ) return [\"RGB\",1,0,1];\r\n\tif ( value[0] == \"T\" ) return [\"T\"];\r\n\tif ( value[0] == \"G\" ) return [\"G\",value[1]];\r\n\tif ( value[0] == \"RGB\" ) return [ \"RGB\",value[1],value[2],value[3] ];\r\n\tif ( value[0] == \"CMYK\" ) return [ \"CMYK\",value[1],value[2],value[3],value[4] ];\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// generate the bottom-line document version and copyright information\r\n//***********************************************************************************************************\r\nfunction setBottomBarInfoLine()\r\n{\r\n\tvar info = Registry.Internals.ident.copyright.@value;\r\n\tinfo += ' / \"'+Registry.Internals.ident.@type+'\"';\r\n\tinfo += \" Version \"+Registry.Internals.ident.@versionMain+'.';\r\n\tinfo += Registry.Internals.ident.@versionSub;\r\n\tinfo += ' Release '+ Registry.Internals.ident.@release;\r\n\tinfo += ' / '+ Registry.Internals.ident.@date;\r\n\tinfo += ' - '+ currentLanguageText; \r\n\tthis.getField(\"bar_BottomLine\").buttonSetCaption( info );\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// get system validation information\r\n//***********************************************************************************************************\r\nfunction isValid()\r\n{\r\n\treturn Boolean([display.visible,display.hidden].indexOf(this.getField(\"Btn_IncompleteSys\").display));\t// save the validation-status\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// get Foliant finalisation status\r\n//***********************************************************************************************************\r\nfunction isFinalised()\r\n{\r\n\tif ( String(Library.VisiblePage.toString()) == \"\" ) return false;\t// return with false, if no result-page is displayed\r\n\treturn true;\t// return true\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"
  },
  {
    "type": "document",
    "name": "IconHandler",
    "code": "\n\r\n\r\n\r\n// ############################################################################################################################\r\n// Container:\tIconHandler\r\n// Created by:\tJrg Dbritz\r\n// last update:\t23.07.2018\r\n// 23.07.2018:\tFinalisation logic added to calculate handling of !ICONS/ICONS and !TAGS/TAGS incl. negative logic to remove\r\n// 15.03.2012:\tSelection of Icons added to any choice action. A dialog choice can have non or several icon-selections\r\n// 16.11.2011:\tMultiple Choice selection implemented\r\n// 02.08.2011:\tLogic-SubTable-handling bugfixed. Validation of subtable can get invalid again if already been valid once\r\n// 02.08.2011:\tValidation-check upgraded to multiple Validation-Strings\r\n// ############################################################################################################################\r\n\r\n\r\nvar IconToAdd = \"\";\r\nvar IconChain = new Array();\r\nvar IconLinkTo = new Array();\r\n\r\n// ************ handle clicked icon actions ***************************************************\r\nfunction iconHandler( IconName )\r\n{\r\n\tif ( Registry.System.Logic.Enabled.toString().indexOf(IconName+';') < 0 ) return;\t// return, if icon not enabled\r\n\tif ( Registry.System.Atoms.Item.(@name==IconName).Stage.toString() == Registry.System.Atoms.Item.(@name==IconName).ZeroStage.toString() )\t// if icon currently in ZeroStage\r\n\t{\r\n\t\tif ( checkIconChoice( IconName ) != true ) return;\r\n\t}\r\n\tvar s = String(Registry.System.Logic.Clicked); if ( s != \"\" ) s+=\";\"; s+=IconName; Registry.System.Logic.Clicked = s; \r\n\tdo \r\n\t{\r\n\t\tif ( this.getField(IconName) != null )\r\n\t\t{\r\n\t\t\tvar iNum = Registry.System.Atoms.Item.(@name==IconName).childIndex();\r\n\t\t\tvar currentStage = Registry.System.Atoms.Item[iNum].Stage.toString();\r\n\t\t\tvar resetStage = Registry.System.Atoms.Item[iNum].ZeroStage.toString();\r\n\t\t\tvar nextStage = Registry.System.Atoms.Item[iNum].Stages.elements(currentStage).nextStage;\r\n\t\t\t\r\n\t\t\tif (Registry.System.Logic.Enabled.toString().indexOf(IconName+';')>=0)\r\n\t\t\t{\r\n\t\t\t\tsetIconToStage( IconName, nextStage );\r\n\t\t\t\trunActionLogic( IconName );\r\n\t\t\t\tcheckIconGrouping();\r\n\t\t\t\tmarkedDirty = true;\r\n\t\t\t\tthis.dirty = markedDirty; // set the dirty-value to the marker's value\r\n\t\t\t}\r\n\t\t\tif ( String(Registry.System.Logic.Active) == \"false\") setIconToStage( IconName, nextStage );\r\n\t\t}\r\n\t\tIconName = \"\";\r\n\t\tif ( IconToAdd != \"\" )\r\n\t\t{\r\n\t\t\tvar iconList = IconToAdd.split(\";\");\r\n\t\t\tIconName = iconList.shift();\r\n\t\t\tIconToAdd = iconList.join(\";\");\r\n\t\t} \r\n\t} \r\n\twhile ( IconName != \"\" );\t// repeat, while IconName not empty ( still icons to be added )\r\n\tregistrySave();\r\n}\r\n\r\n\r\n// ************ check icon action for multiple items-selection ***************************************************\r\nfunction checkIconChoice( IconName )\r\n{\r\n\tvar choiceMembers = Registry.System.Logic.FunctionGroups.Choice.child(IconName).toString().split(\";\"); \t// get the icon's choice members list\r\n\tif ( choiceMembers.join(\"\") == \"\" ) return true;\t// if no members available, leave\r\n\t\r\n\tvar filter = String( Registry.System.Logic.FunctionGroups.Choice.child( IconName ).@filter.toString()).toUpperCase();\t// get the item-list filter of the choice\r\n\tif ( filter  == \"EN\" )\t// filter the list of items depending on related sprite's ENABLED-status\r\n\t{\t\r\n\t\tvar choiceMembersTmp = [];\r\n\t\tvar enA = String(Registry.System.Logic.Enabled.toString()).split(\";\");\t\t// get \"Enabled\"-list as array\r\n\t\tfor each ( var cm in choiceMembers )\t// run over all entries defined for choice \r\n\t\t{\r\n\t\t\tvar cmA = cm.split(\":\");\t// separate the current handled entry into tags and sprites in an array\r\n\t\t\tvar cEnabled = true;\t// basic entry visible indicator\r\n\t\t\tfor each ( var tagSprite in cmA )\t// run over all items in the current choice entry\r\n\t\t\t\tif (this.getField(tagSprite) != null)\t// if item is a sprite ...\r\n\t\t\t\t{\r\n\t\t\t\t\tif (enA.indexOf(tagSprite) < 0) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcEnabled = false;\t// if sprite is not enabled, set basic entry visible indicator false\r\n\t\t\t\t\t\tbreak;\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tif ( cEnabled ) choiceMembersTmp.push(cm);\t// if all related icons enabled, save this choice item\r\n\t\t}\r\n\t\tchoiceMembers=[];\t// cleanup the original choice-item-list\r\n\t\tfor each ( var cm in choiceMembersTmp ) choiceMembers.push(cm);\t// restore only choice-items with enabled icons\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tvar sn = this.getField(IconName).buttonGetCaption();\t// get the icon's name for dialog caption\r\n\tvar sx = \"\";\r\n\tvar ex = {}; \r\n\tvar tagActionSpriteList = {};\r\n\tfor each ( s in choiceMembers )\t// fill listobject with description=choiceMembers values\r\n\t{\r\n\t\tvar dscr = \"Dscr\"+s.split(\":\")[0];\r\n\t\ttagActionSpriteList[s.split(\":\")[0]] = s.split(\":\");\r\n\t\tsx = STR( dscr ); if ( sx.indexOf(\"??\")>= 0 ) sx = STR( dscr, s.split(\":\")[0] + \": ############### missing description for:\" + s.split(\":\")[0] );\r\n\t\tex[sx]=s;\r\n\t}\r\n\tvar selection = \"\";\r\n\tvar count = parseInt( Registry.System.Logic.FunctionGroups.Choice.child( IconName ).@count.toString() );\t// get the item-count-value of the choice\r\n\tif ( count == 1 )\t// for single choice item call simple list-dialog\r\n\t{\r\n\t\tif ( backSelection == false )\t// if not in reverse selection mode (remove last item function)\r\n\t\t{\r\n\t\t\tselection = Dlg_SelectListItem ( STR(\"dlgChoiceCaption\",\"Select one of the following items in\",\"dc\")+\" '\"+sn+\"'\", ex, \"\", 450, 200 );\t// start selection dialog\r\n\t\t\tif ( selection == \"\" ) return false;\t// if no selection done, return empty\r\n\t\t}\r\n\t\telse for ( var s in ex )\t// if in back-selection mode, run over all selectable items\r\n\t\t{\r\n\t\t\tif ( ex[s].split(\":\")[0] == Registry.System.Logic.FunctionGroups.Choice.child( IconName ).@items.split(\":\")[0] ) selection = s;\t// restore selection value from items-list\r\n\t\t}\r\n\t}\r\n\telse  // ########################################################################################################################################################################################################################\r\n\t{\r\n\t\tif ( backSelection == false )\t// ... in normal selection mode\r\n\t\t{\r\n\t\t\tselection = Dlg_SelectMultipleListItem ( STR(\"dlgMultipleChoiceCaption\",\"Select one or more of the following items in\",\"dc\")+\" '\"+sn+\"'\", ex, \"\", 290, 240 );\r\n\t\t\tif ( selection == \"\" ) return false;\t// if non selected or cancel pressed, return empty\r\n\t\t}\r\n\t\telse\t// in back-selection mode\r\n\t\t{\r\n\t\t\tvar sel = [];\t// create a selection array\r\n\t\t\tfor ( var s in ex )\t// run over all selectable choices\r\n\t\t\t\tif ( Registry.System.Logic.FunctionGroups.Choice.child( IconName ).@items.split(\";\").indexOf(ex[s]) >= 0 ) sel.push( s);\t// get each selected choice\r\n\t\t\tselection = sel.join(\";\");\t// make a selection-list with \";\" separators\r\n\t\t}\r\n\t}\r\n\t\r\n\tIconToAdd = \"\";\t// reset the string of icons to add\r\n\tvar selItemsA = selection.split(\";\");\t// separate the selected items in an array\r\n\tfor each ( var sia in selItemsA )\t// run over all separated, selected items\r\n\t{\r\n\t\tvar addIconFromTagList = ex[sia].split(\":\");\t// separate the choice and sprites to add\r\n\t\taddIconFromTagList.shift();\t// remove the choice from list array\r\n\t\tif (addIconFromTagList.length>0)\r\n\t\t{\r\n\t\t\tIconToAdd += addIconFromTagList.join(\";\")+\";\";\t// add the remaining sprites to the add-list\r\n\t\t}\r\n\t}\r\n\twhile ( IconToAdd.indexOf(\";;\")>=0 ) IconToAdd = IconToAdd.replace(\";;\",\";\");\t// remove bad list-signs\r\n\t\r\n\tif ( selection != \"\" )\t// if single or multiple selection done ...\r\n\t{\r\n\t\tvar subLines = \"\";\t// reset the description-sublines\r\n\t\tvar selTagList = [];\t// empty the selected tags list\r\n\t\tvar selArray = selection.split(\";\");\t// create array of selected items\r\n\t\tfor each ( var s in selArray )\t// run over all selection-items in array\r\n\t\t{\r\n\t\t\tsubLines+=\"\\r - \"+s.split(\":\")[0];\t// create the sub-text-lines from choice only ([0])\r\n\t\t\tselTagList.push( ex[s]);\t// add the tag to taglist\r\n\t\t}\r\n\t\tRegistry.System.Logic.FunctionGroups.Choice.child( IconName ).@items = selTagList.join(\";\");\t// store the selected items in the choice-@items-attribute\r\n\t\tthis.getField(IconName).userName = this.getField(IconName).userName.split(\"\\r\")[0] + subLines;\t// add the sublines to the username-string of the icon\r\n\t} else return false;\r\n\treturn true;\r\n}\r\n \r\n// ************ check icon for displaying in a grouping-line ***************************************************\r\nfunction checkIconGrouping()\r\n{\r\n\tvar Selection = Registry.System.Logic.Selection.toString().split(';');\r\n\tvar NumGroups = Registry.System.Logic.Groups.elements(\"*\").length();\r\n\twhile ( NumGroups>0 ) \r\n\t{\r\n\t\tNumGroups--;\r\n\t\tvar Members = Registry.System.Logic.Groups.children()[NumGroups].Members.toString().split(';');\r\n\t\tvar Orientation = Registry.System.Logic.Groups.children()[NumGroups].Orientation;\r\n\t\tvar Anker = Registry.System.Logic.Groups.children()[NumGroups].Anker;\r\n\t\tvar AnkerPos = parseInt(Registry.System.Logic.Groups.children()[NumGroups].AnkerPos);\r\n\t\tvar IconLineSize = 0;\r\n\t\tvar IconAvail = new Array();\r\n\t\tfor ( var h = 0; h<Members.length; h++ ) \r\n\t\t{\r\n\t\t\tif ( Selection.indexOf(Members[h])>=0)\r\n\t\t\t{\r\n\t\t\t\tvar f = this.getField(Members[h]);\r\n\t\t\t\tif ( f!= null ) \r\n\t\t\t\t{ \r\n\t\t\t\t\tif (f.display == display.visible )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tIconAvail.push(Members[h]);\r\n\t\t\t\t\t\tif (Orientation==\"h\") IconLineSize+=f.rect[2]-f.rect[0];\r\n\t\t\t\t\t\tif (Orientation==\"v\") IconLineSize+=f.rect[1]-f.rect[3];\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( Anker == \"c\" ) var IconStart = AnkerPos - IconLineSize/2;\r\n\t\tif ( Anker == \"l\" ) var IconStart = AnkerPos;\r\n\t\tif ( Anker == \"r\" ) var IconStart = AnkerPos - IconLineSize;\r\n\t\tif ( Anker == \"b\" ) var IconStart = AnkerPos;\r\n\t\tif ( Anker == \"t\" ) var IconStart = AnkerPos - IconLineSize;\r\n\t\tfor ( var h = 0; h<IconAvail.length; h++)\r\n\t\t{\r\n\t\t\tvar f = this.getField(IconAvail[h]);\r\n\t\t\tif (Orientation==\"h\")\r\n\t\t\t{\r\n\t\t\t\tvar IconLength = (f.rect[2]-f.rect[0]);\r\n\t\t\t\tvar r = [IconStart, f.rect[1], IconStart+IconLength, f.rect[3]];\r\n\t\t\t}\r\n\t\t\tif (Orientation==\"v\")\r\n\t\t\t{\r\n\t\t\t\tvar IconLength = (f.rect[1]-f.rect[3]);\r\n\t\t\t\tvar r = [f.rect[0], IconStart, f.rect[2], IconStart+IconLength];\r\n\t\t\t}\r\n\t\t\tf.rect = r;\r\n\t\t\tIconStart+=IconLength;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n// ************ handle mouse-action if mouse over icon ***************************************************\r\nfunction iconMouseInHandler( IconName )\r\n{\r\n   markedDirty = this.dirty;\t// save the current dirty-status\r\n   if ( String(Registry.System.Logic.Active) == \"true\")\t// if logic active ...\r\n\t{\r\n\t\tif (Registry.System.Logic.Enabled.toString().indexOf(IconName+';')>=0)\t// if icon is in \"enabled\"-list\r\n\t\tif (Registry.System.Logic.Selection.toString().indexOf(IconName+';')<0)\t// if icon is not already selected\r\n\t\t{\r\n\t\t\tvar f=this.getField(IconName);\t// get the icon in f\r\n\t\t\tif ( f == null ) return;\t// if icon not found, return\r\n\t\t\tf.lineWidth =1;\t// set icon borderline thickness to 1 ( small )\r\n\t\t\tf.fillColor = colorStrToColor( Registry.Internals.colors.iconSelMouseInBG.@value );\t// set the fill-colour\r\n\t\t\tf.strokeColor = colorStrToColor( Registry.Internals.colors.iconSelMouseInFR.@value );\t// set the border-colour\r\n\t\t}\r\n\t}\r\n\tthis.dirty = markedDirty; // set the dirty-value to the marker's value\r\n}\r\n\r\n\r\n// ************ handle mouse-action if mouse left icon ***************************************************\r\nfunction iconMouseOutHandler( IconName )\r\n{\r\n\tmarkedDirty = this.dirty;\t// save the current dirty-status\r\n\tif ( String(Registry.System.Logic.Active) == \"true\")\t// if logic active ...\r\n\t{\r\n\t\tif (Registry.System.Logic.Enabled.toString().indexOf(IconName+';')>=0)\t// if icon is in \"enabled\"-list\r\n\t\tif (Registry.System.Logic.Selection.toString().indexOf(IconName+';')<0)\t// if icon is not already selected\r\n\t\t{\r\n\t\t\tvar f=this.getField(IconName);\t// get the icon in f\r\n\t\t\tif ( f == null ) return;\t// if icon not found, return\r\n\t\t\tf.lineWidth =2;\t// set icon borderline thickness to 2 ( medium )\r\n\t\t\tf.fillColor = colorStrToColor( Registry.Internals.colors.iconSelMouseOutBG.@value );\t// set the fill-colour\r\n\t\t\tf.strokeColor = colorStrToColor( Registry.Internals.colors.iconSelMouseOutFR.@value );\t// set the border-colour\r\n\t\t}\t\r\n\t}\r\n\tthis.dirty = markedDirty; // set the dirty-value to the marker's value\r\n}\r\n\r\n\r\nfunction enableIcon ( IconName, status )\r\n{\r\n\tvar e = String(Registry.System.Logic.Enabled.toString());\r\n\tvar eA = e.split(\";\");\r\n\tif ( status == false)\r\n\t{\r\n\t\te = \";\";\r\n\t\tfor each ( var i in eA ) if (i!=IconName) e+=i+';'\r\n\t}\r\n\tif ( eA.indexOf(IconName)<0) e+=IconName+';';\r\n\tRegistry.System.Logic.Enabled = e;\r\n}\r\n\r\n// ************ check selected icon's logic behaviour ***************************************************\r\nfunction runActionLogic( IconName )\r\n{\r\n\tif ( String(Registry.System.Logic.Active) == \"true\")\r\n\t{\r\n\t\tvar s = Registry.System.Logic.Action;\r\n\t\tvar aLines = s.split(\"\\n\");\r\n\t\tvar cLineNum = -1;\r\n\t\tvar x = aLines.length-1;\r\n\t\twhile ( x>=0 )\r\n\t\t{\r\n\t\t\ts = aLines[x].split(\";\");\r\n\t\t\tif ( s[0]==IconName) { cLineNum=x; x=-1; };\r\n\t\t\tx--;\r\n\t\t}\r\n\t\tif (cLineNum>=0)\r\n\t\t{\r\n\t\t\tvar actionIndex = -1;\r\n\t\t\tfor ( var x in s ) if (s[x].indexOf(\"s\")==0) actionIndex=x;\r\n\t\t\tif (actionIndex>=2)  // [0]=IconName; [1]=ResetStage; [2..n]=ActionCodes\r\n\t\t\t{\r\n\t\t\t\tRegistry.System.Logic.Selection = \";\"+Registry.System.Logic.Selection.toString()+IconName+';'; \t\t\t\t\t\t\t\t\t// Add selected icon-name to \"Selection\"-list\r\n\t\t\t\t//Registry.System.Logic.NameList += \";\"+Registry.System.Atoms.Item.(@name==IconName).Name.toString()+';';\t\t\t\t\t\t// Add selected item-name to \"NameList\"\r\n\t\t\t\tvar e = Registry.System.Logic.Enabled.toString();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Delete selected Icon from \"enabled-list\"\r\n\t\t\t\tvar p = e.indexOf(IconName+';');\r\n\t\t\t\tif (p>=0) Registry.System.Logic.Enabled = e.substr(0,p) + e.substr(p+IconName.length+1,10000);\t\t\t\t\t\t\t\t\t// Save new \"enabled-list\"\r\n\t\t\t\t\r\n\t\t\t\tfor ( var ax=0; ax<aLines.length-1; ax++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar s = aLines[ax].split(';');\r\n\t\t\t\t\tif (s.length>0) \r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\tvar action = s[actionIndex];\r\n\t\t\t\t\t\tswitch ( action )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase \"he\":\t// hide at enabled status\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.getField(s[0]).display = display.hidden;\r\n\t\t\t\t\t\t\t\t//Registry.System.Logic.Enabled = Registry.System.Logic.Enabled.toString() + s[0]+ \";\";\t\t\t\t\t\t\t\t// Add Icon with \"enable\"-action to \"enabled-list\"\r\n\t\t\t\t\t\t\t\tenableIcon(s[0],true);\r\n\t\t\t\t\t\t\t} break;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase \"H\":\r\n\t\t\t\t\t\t\tcase \"hp\":\t// hide permanently\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.getField(s[0]).rect=[0,0,0,0];\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tcase \"h\":\t// hide and disable\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.getField(s[0]).display = display.hidden;\r\n\t\t\t\t\t\t\t\tvar e = Registry.System.Logic.Enabled.toString();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Delete Icon with \"hide\"-action from \"enabled-list\"\r\n\t\t\t\t\t\t\t\tvar p = e.indexOf(s[0]+';');\r\n\t\t\t\t\t\t\t\tif (p>=0) Registry.System.Logic.Enabled = e.substr(0,p) + e.substr(p+s[0].length+1, 10000);\t\t\t\t\t\t// Save new \"enabled-list\"\r\n\t\t\t\t\t\t\t}  break;\r\n\r\n\t\t\t\t\t\t\tcase \"ah\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (IconToAdd!=\"\") IconToAdd+=\";\"; IconToAdd+=s[0];\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add Icon to selected list from hidden and enabled status\r\n\t\t\t\t\t\t\t\tthis.getField(s[0]).display = display.hidden;\r\n\t\t\t\t\t\t\t\tvar e = Registry.System.Logic.Enabled.toString();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Delete Icon with \"hide\"-action from \"enabled-list\"\r\n\t\t\t\t\t\t\t\tvar p = e.indexOf(s[0]+';');\r\n\t\t\t\t\t\t\t\tif (p>=0) Registry.System.Logic.Enabled = e.substr(0,p) + e.substr(p+s[0].length+1, 10000);\t\t\t\t\t\t// Save new \"enabled-list\"\r\n\t\t\t\t\t\t\t}  break;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase \"E\":\r\n\t\t\t\t\t\t\tcase \"eh\":\t// enable icon from hidden state\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.getField(s[0]).display = display.visible;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase \"e\":\t// enable icon from disabled state\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tRegistry.System.Logic.Enabled = Registry.System.Logic.Enabled.toString() + s[0]+ \";\";\t\t\t\t\t\t\t\t// Add Icon with \"enable\"-action to \"enabled-list\"\r\n\t\t\t\t\t\t\t\ticonMouseOutHandler( s[0] );\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// from \"d\"-disabled status\r\n\t\t\t\t\t\t\t}  break;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase \"D\":\r\n\t\t\t\t\t\t\tcase \"dh\":\r\n\t\t\t\t\t\t\tcase \"d\":\t// disable icon from any state\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tRegistry.System.Logic.Enabled = Registry.System.Logic.Enabled.split(\";\"+s[0]+\";\").join(\";\");\t\t\t\t\t\t// Remove the icons from enabled list\r\n\t\t\t\t\t\t\t\tthis.getField(s[0]).display = display.visible;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// make icon visible\r\n\t\t\t\t\t\t\t\ticonMouseOutHandler( s[0] );\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// from \"h\"-hidden status\r\n\t\t\t\t\t\t\t}  break;\r\n\r\n\t\t\t\t\t\t\tcase \"v\":\t// make icon visible\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.getField(s[0]).display = display.visible;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// make icon visible\r\n\t\t\t\t\t\t\t}  break;\r\n\r\n\t\t\t\t\t\t\tcase \"a\":\t// add from any state\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (IconToAdd!=\"\") IconToAdd+=\";\"; IconToAdd+=s[0];\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add Icon to selected list from hidden and enabled status\r\n\t\t\t\t\t\t\t\tvar fx = this.getField(s[0]);\r\n\t\t\t\t\t\t\t\tif ( fx != null )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfx.display = display.visible;\r\n\t\t\t\t\t\t\t\t\tRegistry.System.Logic.Enabled += s[0]+';';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}  break;\r\n\r\n\t\t\t\t\t\t\tcase \"ae\":\t// add from enabled state only\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar en = Registry.System.Logic.Enabled.toString().indexOf(\";\"+s[0]+\";\");\r\n\t\t\t\t\t\t\t\tif ( en<0 ) break;\r\n\t\t\t\t\t\t\t\tif (IconToAdd!=\"\") IconToAdd+=\";\"; IconToAdd+=s[0];\r\n\t\t\t\t\t\t\t}  break;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t   if ( action.charAt(0) == \"s\" )\r\n\t\t\t\t\t\t\t\t{ console.clear();\r\n\t\t\t\t\t\t\t\t\tvar SubTable = action.split(\",\");\t// split action-string to [\"s\",subtable1,...subtableN]\r\n\t\t\t\t\t\t\t\t\tfor ( var subTabNum in SubTable ) if (subTabNum>0)\t// run over all subtables if available ( except table[0] as it is \"s\" )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar tab = Registry.System.Logic.SubTable.elements(SubTable[subTabNum]).toString().split(\"\\n\");\t// create table-lines in tab-array\r\n\t\t\t\t\t\t\t\t\t\tvar headLine = tab[0].split(\";\");\t// separate headline as name-string-array\r\n\t\t\t\t\t\t\t\t\t\tvar colNum = headLine.length;\t// detect number of columns\r\n\t\t\t\t\t\t\t\t\t\t//var logic = new Array();\t// create logic-array\r\n\t\t\t\t\t\t\t\t\t\tvar logic = [];\t// create logic-array\r\n\t\t\t\t\t\t\t\t\t\tfor ( var x=0; x<colNum; x++) // preset the logic-array with already selected and current icon-status\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tif ( headLine[x]==IconName ) logic.push(1); else logic.push(0);\r\n\t\t\t\t\t\t\t\t\t\t\tif ( isSelected ( headLine[x] ) == true ) logic[x] = 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tfor ( var xLine in tab ) if ( xLine>0 ) // delete all tab-lines that do not match the logic's \"1\"\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvar line = tab[xLine].split(\";\");\r\n\t\t\t\t\t\t\t\t\t\t\tfor ( var x=0; x<colNum; x++ ) if ( (logic[x]==1) && (line[x]==0) ) tab[xLine]=\"\";\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tRegistry.System.Logic.Valid = Registry.System.Logic.Valid.toString().replace(SubTable[subTabNum].charAt(0),\"\");\t// remove SubTable-Character from Valid-String by default\r\n\r\n\t\t\t\t\t\t\t\t\t\tvar lx = logic.join(\";\");\r\n\t\t\t\t\t\t\t\t\t\tfor ( var xLine in tab ) if ( xLine>0 )\t// run over \r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tif ( lx == tab[xLine] ) Registry.System.Logic.Valid += SubTable[subTabNum].charAt(0);\t// add SubTable-Character to Valid-String, if subtable logic okay\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor ( var xLine in tab ) if ( xLine>0 ) // set all \"1\" from the remaining tab-lines in logic\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvar line = tab[xLine].split(\";\");\r\n\t\t\t\t\t\t\t\t\t\t\tfor ( var x=0; x<colNum; x++ ) if ( (logic[x]==0) && (line[x]==1) ) logic[x]=1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor ( var x in logic ) // hide or enable all icons depending on the logic\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tif ( logic[x]==0 ) this.getField(headLine[x]).display = display.hidden;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( (logic[x]==1) && ( isSelected(headLine[x]) == false ) )\t// automatic enabling of logic's == 1\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t//Registry.System.Logic.Enabled = Registry.System.Logic.Enabled.toString() + headLine[x]+ \";\";\t\t\t\t\t\t\t\t\t// Add Icon with \"enable\"-action to \"enabled-list\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t//iconMouseOutHandler( headLine[x] );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.println(headLine[x]+'='+logic[x]);\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tvar e = Registry.System.Logic.Enabled.toString();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Delete selected Icon from \"enabled-list\"\r\n\t\t\t\t\t\t\t\t\t\t\tvar p = e.indexOf(IconName+';');\r\n\t\t\t\t\t\t\t\t\t\t\tif (p>=0) Registry.System.Logic.Enabled = e.substr(0,p) + e.substr(p+IconName.length+1,10000);\t\t\t\t\t\t\t\t\t// Save new \"enabled-list\"\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}  break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar s = aLines[aLines.length-1].split(';');\r\n\t\t\t\tif ( s[0] == \"SysValid\" )\t// if SysValid-line is reached\r\n\t\t\t\t{\r\n\t\t\t\t\tRegistry.System.Logic.Valid += s[actionIndex];\t// add the SysValid-character of the action-index if available\r\n\t\t\t\t\tvar vc = Registry.System.Logic.Valid.toString();\t// get the Valid-string\r\n\t\t\t\t\tvar vd = Registry.System.Logic.Validation.toString().split(\";\");\t// get the Validation-strings as array\r\n\t\t\t\t\tvar f = this.getField(\"Btn_IncompleteSys\");\t// get the incomplete-message-field\r\n\t\t\t\t\tf.delay = true;\t// do not refresh the field\r\n\t\t\t\t\tf.display = display.visible;\t// hide field by standard\r\n\t\t\t\t\tfor ( var v=0; v<vd.length; v++ )\t// run over all Validation-strings\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar valid = true;\r\n\t\t\t\t\t\tfor ( var h=0; h<vd[v].length; h++)\t// run over the current Validation-string's characters\r\n\t\t\t\t\t\t\tif (vc.indexOf(vd[v].charAt(h))<0) valid = false;\t// if character not in Valid-string, set valid to false\r\n\t\t\t\t\t\tif ( valid == true ) f.display = display.hidden;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tf.delay = false;\t// refresh field\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n// ************ reset all icon-logic to default values ***************************************************\r\nfunction resetActionLogic()\r\n{\r\n\tthis.getField(\"Btn_IncompleteSys\").display = display.hidden;\r\n\tIconChain=[];\r\n\tIconLinkTo=[];\r\n\tif ( String(Registry.System.Logic.Active) == \"true\")\r\n\t{\r\n\t\tIconToAdd=\"\";\r\n\t\tRegistry.System.Logic.Clicked = \"\";\t// clean-up icon selection history\r\n\t\tRegistry.System.Logic.Selection = \"\";\t// clean-up Icon selection list\r\n\t\tRegistry.System.Logic.Enabled = \"\";\t// \r\n\t\tRegistry.System.Logic.IconStatus = \";\";\r\n\t\tRegistry.Internals.settings.finalised.@value = true;\t// mark the current Registry-status as finalised\r\n\t\tvar s = Registry.System.Logic.Action;\r\n\t\tvar aLines = s.split(\"\\n\");\r\n\t\tfor ( var x=0; x<aLines.length; x++)\r\n\t\t{\r\n\t\t\tvar s = aLines[x].split(';'); // s[0]=IconName; s[1]=ResetStage; s[2..n]=ActionCodes\r\n\t\t\tif (s.length>0) \r\n\t\t\t{\r\n\t\t\t\tif (s[1] == \"e\")   \r\n\t\t\t\t{\t\r\n\t\t\t\t\tRegistry.System.Logic.Enabled = Registry.System.Logic.Enabled.toString() + s[0]+ \";\";\r\n\t\t\t\t\ticonMouseOutHandler( s[0] );\r\n\t\t\t\t}\r\n\t\t\t\tif (s[1] == \"d\")\r\n\t\t\t\t{\t\r\n\t\t\t\t\tvar f = this.getField(s[0]); if (f!=null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tf.lineWidth =2;\r\n\t\t\t\t\t\tf.strokeColor=[\"T\"];\r\n\t\t\t\t\t\tf.fillColor = [\"T\"];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (s[1] == \"h\")   \r\n\t\t\t\t{\t\r\n\t\t\t\t\tvar f = this.getField(s[0]);\r\n\t\t\t\t\tif (f!=null) f.display = display.hidden;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (s[1] == \"he\")   \r\n\t\t\t\t{\t\r\n\t\t\t\t\tvar f = this.getField(s[0]);\r\n\t\t\t\t\tif (f!=null) f.display = display.hidden;\r\n\t\t\t\t\tenableIcon(s[0],true);\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\tif ( s[0] == \"SysValid\" ) Registry.System.Logic.Valid = s[1];\r\n\t\t}\r\n\t\tregistrySave();\r\n\t}\r\n\tconsole.clear();\r\n}\r\n\r\n\r\n// ************ finalise the action logic with selection and deselection ***************************************************\r\nfunction finaliseActionLogic()\r\n{\r\n\tif ( String(Registry.System.Logic.Active) == \"true\")\t// stop at deactivated logic\r\n\tif ( String(Registry.Internals.settings.finalised.@value.toString()) == \"false\")\t// run only, if not alredy finalised\r\n\t{\r\n\t\tvar sel = \";\"+String(Registry.System.Logic.Selection.toString());\r\n\t\tRegistry.System.Logic.Enabled = \"\";\r\n\t\tvar s = Registry.System.Logic.Action;\r\n\t\tvar aLines = s.split(\"\\n\");\r\n\t\tfor ( var x=0; x<aLines.length; x++)\r\n\t\t{\r\n\t\t\tvar s = aLines[x].split(';'); // s[0]=IconName; s[1]=ResetStage; s[2..n]=ActionCodes\r\n\t\t\tif (s.length>0) \r\n\t\t\t{\r\n\t\t\t\tif ( sel.indexOf(s[0]+';') <0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar f = this.getField(s[0]);\r\n\t\t\t\t\tif (f != null) f.display = display.hidden;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar sel = \";\"+String(Registry.System.Logic.Selection.toString());\r\n\t\tvar iStat = \";\";\r\n\r\n\t\tfor each ( var i in Registry.System.Logic.FunctionGroups.Activation.children() ) if ( sel.indexOf(\";\"+i.name()+\";\") >=0 ) iStat += i.toString()+';';\t// add the item to activate from Sprite-Activation-List\r\n\t\tfor each ( var i in Registry.System.Logic.FunctionGroups.Choice.children() ) if ( sel.indexOf(\";\"+i.name()+\";\") >=0 )\t// add the single or multiple choice items to the selection\r\n\t\t{\r\n\t\t\tvar selItems = i.@items.split(\";\");\t// split all selected items by \";\"\r\n\t\t\tfor each ( var it in selItems )\t\r\n\t\t\t{\r\n\t\t\t\tiStat += it.split(\":\")[0]+';';\t// split all separated items by \":\" to isolate the selected tag from choice in selItems[0]\r\n\t\t\t\t//app.alert(\"it:\\n\"+it+\"\\n selItems:\\n\"+selItems+\"\\n iStat:\\n\"+iStat);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor ( var i = 0; i<Registry.System.Logic.FunctionGroups.Deactivation.elements().length(); i++)\r\n\t\t{\r\n\t\t\tvar deactivatorName = Registry.System.Logic.FunctionGroups.Deactivation.elements()[i].name();\r\n\t\t\tif ( sel.indexOf(\";\"+deactivatorName+\";\") >=0 )\r\n\t\t\t{\r\n\t\t\t\tvar deactivationList = String(Registry.System.Logic.FunctionGroups.Deactivation.elements()[i].toString()).split(\";\"); //con(\"deact:\"+deactivationList);\r\n\t\t\t\tfor ( var j = 0; j<deactivationList.length; j++ ) if ( iStat.indexOf(\";\"+deactivationList[j]+\";\") >=0 ) { iStat = iStat.replace( \";\"+deactivationList[j]+\";\",\";\");} //con(iStat); }\r\n\t\t\t}\r\n\t\t}\r\n\t\tRegistry.System.Logic.IconStatus = iStat;\r\n\t\t\r\n\t\t// finalize section\r\n\t\tvar itemsToAdd=[];\r\n\t\tvar itemsToRem=[];\r\n\t\tfor each ( var i in Registry.System.Logic.FunctionGroups.Finalize.children() ) \r\n\t\t{\r\n\t\t\tvar result = false;\r\n\t\t\tvar fkt = String(i.@fkt.toString()).toUpperCase();\r\n\t\t\tvar itemA = String(i.@item.toString()).split(\";\");\r\n\t\t\tvar condA = String(i.@cond.toString()).split(\";\");\r\n\t\t\tvar value = String(i.toString());\r\n\t\t\t\r\n\t\t\t//if (fkt == \"EXEC\" ) eval(value); else\r\n\t\t\tif (fkt == \"ACTIFALL\" )\t// activate if all condition-items match\r\n\t\t\t{\r\n\t\t\t\tvar lgx = true;\r\n\t\t\t\tfor each( var cond in condA) \r\n\t\t\t\t{\r\n\t\t\t\t\tif ( isSelected(cond) == false )\r\n\t\t\t\t\tif ( itemsToAdd.indexOf(cond)<0 ) lgx = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (lgx == true)\t// if reference item's logic matches (all conditions met)\r\n\t\t\t\t\tfor each (var item in itemA)\t// run over all items to activate\r\n\t\t\t\t\t\tif (isSelected(item) == false)\t\t// find items at false status to be handled only\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar itemName = item;\r\n\t\t\t\t\t\t\tif ( itemName.indexOf(\"!\")>=0 ) itemName=item.slice(item.indexOf(\"!\")+1);\t// create item-name without \"!\"\r\n\t\t\t\t\t\t\tif ( itemName == item ) itemsToAdd.push(itemName);\t// non-negative acting (TAG)\r\n\t\t\t\t\t\t\telse itemsToRem.push(itemName);\t\t// negative acting (!TAG)\r\n\t\t\t\t\t\t}\r\n\t\t\t} else\r\n\r\n\t\t\tif (fkt == \"ACTIFONE\" )\t// activate if minimum one condition-item matches\r\n\t\t\t{\r\n\t\t\t\tvar lgx = false;\t// logix default false to raise any true item\r\n\t\t\t\tfor each( var cond in condA)\t// run over all condition-items in condA\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( isSelected(cond) == true ) lgx = true;\t// if icon or tag selected, logix=true\r\n\t\t\t\t\tif ( itemsToAdd.indexOf(cond)>=0 ) lgx = true;\t// if icon or tag to be added, logix=true\r\n\t\t\t\t}\r\n\t\t\t\tif (lgx == true)\t// if reference item's logic matches (at least one condition met)\r\n\t\t\t\t\tfor each (var item in itemA)\t// run over all items to activate\r\n\t\t\t\t\t\tif (isSelected(item) == false)\t\t// find items at false status to be handled only\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar itemName = item;\r\n\t\t\t\t\t\t\tif ( itemName.indexOf(\"!\")>=0 ) itemName=item.slice(item.indexOf(\"!\")+1);\t// create item-name without \"!\"\r\n\t\t\t\t\t\t\tif ( itemName == item ) itemsToAdd.push(itemName);\t// non-negative acting (TAG)\r\n\t\t\t\t\t\t\telse itemsToRem.push(itemName);\t\t// negative acting (!TAG)\r\n\t\t\t\t\t\t}\r\n\t\t\t} //else\r\n\t\t\t\r\n\t\t\tif (String(value.toString()).length>0) eval(value);\r\n\t\t}\r\n\t\t// app.alert(\"itemsToAdd:\"+itemsToAdd+\"\\nitemsToRem:\"+itemsToRem);\r\n\t}\r\n\tfor each ( var item in itemsToAdd )\t// run over all items in list to add\r\n\t{\r\n\t\tif ( this.getField(item) == null)\t// is this item a TAG ?\r\n\t\t{\r\n\t\t\tRegistry.System.Logic.IconStatus = String(Registry.System.Logic.IconStatus.toString())+';'+item+';';\t// add the TAG to IconStatus\r\n\t\t}\r\n\t\telse\t// this item is an ICON\r\n\t\t{\r\n\t\t\tRegistry.System.Logic.Selection = String(Registry.System.Logic.Selection.toString())+';'+item+';';\t// add the icon-name to Selection\r\n\t\t\tsetIconToStage ( item, \"\" );\t// set icon to next logic stage\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor each ( var item in itemsToRem )\t// run over all items in list to remove\r\n\t{\r\n\t\tif ( this.getField(item) == null)\t// is this item a TAG ?\r\n\t\t{\r\n\t\t\tvar i = String(Registry.System.Logic.IconStatus.toString());\r\n\t\t\tvar iA = i.split(item);\r\n\t\t\tRegistry.System.Logic.IconStatus = iA.join(\";\");\t// join the remaining TAGs to IconStatus\r\n\t\t}\r\n\t\telse\t// this item is an ICON\r\n\t\t{\r\n\t\t\tvar i = String(Registry.System.Logic.Selection.toString());\r\n\t\t\tvar iA = i.split(item);\r\n\t\t\tRegistry.System.Logic.Selection = iA.join(';');\t// join the remaining icon-names back to Selection\r\n\t\t\tsetIconToStage ( item, \"!\" );\t// set icon to start logic-stage and hide\r\n\t\t}\r\n\t}\t\r\n\tRegistry.Internals.settings.finalised.@value = true;\t// mark the current Registry-status as finalised\r\n\tregistrySave();\r\n}\r\n\r\n\r\n\r\n\r\nfunction resetIconStages ()\r\n{\r\n\tIconLinkTo = [];\r\n\tvar iNum = Registry.System.Atoms.Item.length();\r\n\tfor ( var iRun = 0; iRun<iNum; iRun++)\r\n\t{\r\n\t\tvar zeroStageName = Registry.System.Atoms.Item[iRun].ZeroStage.toString();\r\n\t\tvar iName = Registry.System.Atoms.Item[iRun].@name.toString();\r\n\t\tsetIconToStage( iName, zeroStageName );\r\n\t}\r\n\tregistrySave();\r\n}\r\n\r\n\r\nfunction arrangeIcons ()\r\n{\r\n\tIconChain.sort();\r\n\tvar sysSize = 0.0;\r\n\tfor ( var x in IconChain )\r\n\t{\r\n\t\tvar a = IconChain[x].split(',');\r\n\t\tsysSize += parseFloat(a[3])-parseFloat(a[1]);\r\n\t}\r\n\tvar pRect = this.getPageBox();\r\n\tvar lStart = (pRect[2]-sysSize) / 2;\r\n\tfor ( var x in IconChain ) \t\r\n\t{\r\n\t\tvar a = IconChain[x].split(',');\r\n\t\tvar x1 = lStart + parseFloat(a[5]) - parseFloat(a[1]);\r\n\t\tvar x2 = x1 + parseFloat(a[7]) - parseFloat(a[5]);\r\n\t\tthis.getField( a[9] ).rect = [x1, parseFloat(a[6]), x2, parseFloat(a[8]) ];\r\n\t\tlStart += parseFloat(a[3]) - parseFloat(a[1]);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n// ************ set Icon to given stage ***************************************************\r\nfunction setIconToStage ( IconName, StageName )\r\n{\r\n\tvar iNum = Registry.System.Atoms.Item.(@name==IconName).childIndex();\r\n\r\n\tif ( StageName == \"\" )\t// set to next logic stage\r\n\t{\r\n\t\tvar currentStageName = String(Registry.System.Atoms.Item[iNum].Stage.toString())+'';\r\n\t\tvar currentStageData = XML( Registry.System.Atoms.Item[iNum].Stages.elements(currentStageName) );\r\n\t\tStageName = String(currentStageData.nextStage.toString());\r\n\t}\r\n\t\r\n\tvar remove = false;\r\n\tif ( StageName == \"!\" )\t// set to start logic-stage and hide\r\n\t{\r\n\t\tvar currentStageName = String(Registry.System.Atoms.Item[iNum].Stage.toString())+'';\r\n\t\tvar currentStageData = XML( Registry.System.Atoms.Item[iNum].Stages.elements(currentStageName) );\r\n\t\tvar dockInfo = String(currentStageData.dock.toString());\r\n\t\tif ( dockInfo!=\"\")\r\n\t\t{\r\n\t\t\tvar dockPos = dockInfo.split(\",\")[0];\r\n\t\t\tvar icTemp = [];\r\n\t\t\tfor each ( var ic in IconChain ) if ( ic.split(',')[0] != dockPos ) icTemp.push(ic);\r\n\t\t\tIconChain = [];\r\n\t\t\tfor each ( var ic in icTemp ) IconChain.push(ic);\r\n\t\t}\r\n\t\tStageName = String(Registry.System.Atoms.Item[iNum].ZeroStage.toString());\r\n\t\tremove = true;\r\n\t\tarrangeIcons();\r\n\t\tcheckIconGrouping();\t// ########################################################################\r\n\t}\r\n\t\r\n\tRegistry.System.Atoms.Item[iNum].Stage = StageName+'';\r\n\tvar stageData = XML( Registry.System.Atoms.Item[iNum].Stages.elements(StageName) );\r\n\tvar f = this.getField(IconName);\r\n\tif (f == null) return;\r\n\tf.delay = true;\r\n\tf.borderStyle = stageData.borderStyle;\r\n\tf.alignX = stageData.alignX;\r\n\tf.alignY = stageData.alignY;\r\n\tf.buttonPosition = stageData.position;\r\n\tf.buttonScaleHow = stageData.scaleHow;\r\n\tf.buttonScaleWhen = stageData.scaleWhen;\r\n\tf.display = stageData.display; \r\n\tf.fillColor = colorStrToColor( stageData.fillColor ); \r\n\tf.highlight = stageData.highlight;\r\n\tf.lineWidth = stageData.lineWidth;\r\n\tf.page = stageData.page;\r\n\tif ( String(stageData.linkTo.toString()) != \"\" )\t// if linkTo-data available (this icon is linked to a parent-icon)\r\n\t{\r\n\t\tvar lx = String(stageData.linkTo.toString()).split(\",\");\t// get the linkTo-data\r\n\t\tIconLinkTo.push( IconName +','+ String(stageData.rect.toString()) + \",\" + lx  );\t// add the icon to the linkedTo-list\r\n\t}\r\n\tvar chainCheck = \",\"; \t// create a docking-ID-string-list\r\n\tfor ( var x in IconChain ) chainCheck += String(IconChain[x]).split(\",\")[0]+',';\t// extract the icon's docking ID's\r\n\tvar dockStr = String(stageData.dock.toString());\t// get the docking position string\r\n\tif ( dockStr != \"\" ) \t// if docking-position defined ...\r\n\t{\r\n\t\tif ( chainCheck.indexOf( ','+dockStr.split(',')[0]+',') < 0)\t// check, if icon not already in list\r\n\t\t{\r\n\t\t\tIconChain.push( dockStr+','+String(stageData.rect.toString())+','+IconName );\t// add the icon to the list\r\n\t\t\tarrangeIcons();\t// re-arrange the listed icons\r\n\t\t}\r\n\t}  else f.rect = stageData.rect.split(\",\");\t// ... else just set the stage position and dimensions (rect)\r\n\t\r\n\tfor ( var x in IconLinkTo )\t// run over all LinkTo-icon-data and arrange the icons\r\n\t{\r\n\t\tvar lx = String(IconLinkTo[x]).split(\",\");\t// get linkTo-entry\r\n\t\tvar r = this.getField( lx[5] ).rect;\t// get the current rect-positions of the partent-icon to link to\r\n\t\tvar fd = this.getField( lx[0] );\t// get the current icon to be linked to\r\n\t\tvar w = lx[3]-lx[1];\t// calculate the width\r\n\t\tvar h = lx[2]-lx[4];\t// calculate the height\r\n\t\tvar dx = parseFloat(lx[6]);\t// calculate the related delta-x position\r\n\t\tvar dy = parseFloat(lx[7]);\t// calculate the related delta-y position\r\n\t\tfd.rect = [  r[0]+dx, r[3]+h+dy, r[0]+w+dx, r[3]+dy ];\t// set the icon to the linked position\r\n\t}\r\n\r\n\tf.readonly = [false,true][stageData.readonly];\t// set icon's read-only status\r\n\tf.rotation = [0,90,180,270][stageData.rotation / 90];\t// set icon-rotation\r\n\tf.strokeColor = colorStrToColor( stageData.strokeColor );\t// set frame-colour\r\n\tf.textColor = colorStrToColor( stageData.txtCol );\t// set font/text-colour\r\n\tf.textFont = stageData.txtFont;\t// set icons font type\r\n\tf.textSize = stageData.txtSize;\t// set icons text size\r\n\tf.buttonSetCaption( stageData.caption );\t// set button text (caption)\r\n\tf.delay = false;\t// stop delayed drawing\r\n\tif ( remove==true) this.getField(IconName).display = display.hidden;\t// if icon has to be removed, it has to be hidden as well\r\n}\r\n\r\n//***********************************************************************************************************\r\n// checks, if a given item-name (ICON, TAG, !ICON, !TAG) is selected in the current system-selection\r\n//***********************************************************************************************************\r\nfunction isSelected ( name )\r\n{\r\n\tvar negativeLogic = false;\t// items with \"!\"-prefix are handled as negative logic (is-not-selected)\r\n\tif (name.indexOf(\"!\")>=0)\t// detect negative logic items\r\n\t{\r\n\t\tnegativeLogic=true; \t// mark negative logic is true\r\n\t\tname=name.slice(name.indexOf(\"!\")+1);\t// remove the \"!\" from item-name\r\n\t}\r\n\tvar s = ';'+String(Registry.System.Logic.Selection.toString());\t// default check for item-name in Selection (ICON-list)\r\n\tvar p = s.indexOf(\";\"+name+\";\");\t// get string-position of the item\r\n\tif ( p<0 )\t// if sub-string not found (<0)\r\n\t{\r\n\t\tvar s = ';'+String(Registry.System.Logic.IconStatus.toString());\t// check for name in IconStatus (TAG-list)\r\n\t\tvar p = s.indexOf(\";\"+name+\";\");\t// get string-position of item\r\n\t\tif ( p<0 ) return negativeLogic;\t// return false for \"not selected\"\r\n\t\treturn !negativeLogic;\t// return result for \"TAG selected\"\r\n\t}\r\n\telse return !negativeLogic;\t// return result for \"ICON selected\"\r\n}\r\n\r\n\r\n\r"
  },
  {
    "type": "document",
    "name": "TextProcessor",
    "code": "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Version 2.0 09.03.2012\r\n// function xmlToRich completely recoded\r\n// Version 1.0 23.07.2011\r\n\r\nfunction con ( txt ){console.println(txt);}\r\nfunction cls () {console.clear()} \r\n\r\nvar lcidRef = -1;\r\nvar lcidInUse = -1;\r\nvar currentLanguageName = \"\";\t// english name of the current selected language\r\nvar currentLanguageText = \"\";\t// displayed text for the language name\r\n\r\nvar PageTextList = [];\t// Array of localised-names of the pages\r\nvar PageList = {};\t// List-Object with localised-name and page-name linked\r\nvar PageName = \"\";\r\nvar PageText = \"\";\r\nvar PageLink = \"\";\r\n\r\nvar txtOffCode = \"/*\";\t// text-off code for Hyperpage-macros\r\nvar txtOnCode =  \"*/\";\t// text-on code for Hyperpage-macros\r\nvar txtVisible = true;\r\n\r\nvar stringTableUse = true;\r\n\r\nvar TableObj = {};\r\nvar IniListArray = [];\r\n\r\nvar Library;\r\n\r\n//*******************************************************************************************************\r\n//*** Initialise the Library-variable and prepare Button-captions and -hints\r\n//*******************************************************************************************************\r\nfunction Library_Init()\r\n//*******************************************************************************************************\r\n{\r\n\tLibrary = new XML( this.getField(\"Babelfisch\").value);\t// Load Library string-tables from \"Babelfisch\"\r\n\tlcidRef = Library.ReferenceLanguage.@lcid;\t// load reference language id (LCID)\r\n\tlcidInUse = Library.CurrentLanguage.@lcid;\t// load currently used language id (LCID)\r\n\tcurrentLanguageName = Library.CurrentLanguage.@name.toString();\r\n\tcurrentLanguageText = Library.CurrentLanguage.@text.toString();\r\n\tvar childIdx = Library.Language.(@lcid == lcidInUse).childIndex();\t// get current language child-index\r\n\tPageList = {}; PageTextList = [];\t// init PageList and PageTextList\r\n\tvar xList = Library.children()[childIdx].elements().(@type==\"pn\");\t// load \"pn\"-page names in xList\r\n\tfor each ( var pn in xList ) { PageList[pn.@text.toString()] = pn.@name.toString(); PageTextList.push(pn.@text) };\t// set strings in pagename-lists\r\n\tsetHintsAndCaptions();\t// init hint and caption texts\r\n}\r\n\r\n//*******************************************************************************************************\r\n//*** Save the Library-variable-content to the \"Babelfish\"-field\r\n//*******************************************************************************************************\r\nfunction Library_Save()\r\n//*******************************************************************************************************\r\n{\r\n\tthis.getField(\"Babelfisch\").value = Library;\r\n}\r\n\r\n//**********************************************************************************************************************\r\n// set language depending hint text of buttons and sprites (  mouse-over hint )\r\n//**********************************************************************************************************************\r\nfunction setHintsAndCaptions()\r\n{\r\n\tvar childIdx = Library.Language.(@lcid == Library.CurrentLanguage.@lcid).childIndex();\t// get the current language's child-index\r\n\tvar xList = Library.children()[childIdx].elements().(@type==\"sh\");\t// get the sprite-hint list\r\n\tfor each ( var sh in xList ) {\tvar f = this.getField( sh.@name ); if ( f != null ) f.userName = sh.@text }\t// set the sprite-hints\r\n\tvar xList = Library.children()[childIdx].elements().(@type==\"un\");\t// get the user-name list\r\n\tfor each ( var un in xList ) {\tvar f = this.getField( un.@name ); if ( f != null ) f.userName = un.@text }\t// set the user-names\r\n\tvar xList = Library.children()[childIdx].elements().(@type==\"bc\");\t// get the button-caption list\r\n\tfor each ( var bc in xList ) {\tvar f = this.getField( bc.@name ); if ( f != null ) f.buttonSetCaption( bc.@text ) }\t// set the button caption texts\r\n}\r\n\r\n//*******************************************************************************************************\r\n//*** Show Hyperpage by language-depending name in pageText or @+pageName\r\n//*******************************************************************************************************\r\nfunction showPage ( pageText, activateMacros )\r\n//*******************************************************************************************************\r\n{\r\n\tif ( pageText == \"\" ) return;\r\n\tPageText = pageText;\r\n\tPageName = PageList[PageText];\r\n\tif ( ( PageName==undefined ) && ( pageText.indexOf(\"@\")==0 )) PageName = pageText.split(\"@\")[1];\r\n\tPageLink = PageName;\r\n\tvar PageCode = \"\";  // Load xml-page-description-code to PageCode \r\n\tPageCode = Library.HyperPage.elements([PageName]).toString();\r\n\tvar f = this.getField(\"InfoBoard\");\tf.value = \"This page is not created yet\";\r\n\tif ( PageCode != \"\" ) f.richValue = xmlToRich( PageCode, activateMacros, \"\", \"\" );\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//*** Save Hyperpage-raw-text to the current selected Hyperpage-data\r\n//*******************************************************************************************************\r\nfunction savePage ()\r\n//*******************************************************************************************************\r\n{\r\n\tvar f = this.getField(\"InfoBoard\");\r\n\tvar PageCode = richToXML ( f.richValue, f.value );\r\n\tif ( PageLink != \"\" )\r\n\t{\r\n\t\tvar hyperIdx = Library.HyperPage.elements([PageLink]).childIndex();\r\n\t\tLibrary.HyperPage.children()[hyperIdx] = PageCode;\r\n\t}\r\n\tLibrary_Save();\r\n}\r\n\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** Convert RichText-spans to XML-data from richValue and textValue of a edit-field\r\n//*******************************************************************************************************\r\nfunction richToXML ( richTextValue, textValue )\r\n//*******************************************************************************************************\r\n{\r\n\tvar spans = richTextValue;\r\n\tfor ( var i=0; i<spans.length; i++) \r\n\t{\r\n\t\tif ( spans[i].text+'' != \"\" ) textValue = textValue.substr( spans[i].text.length, textValue.length);  // detect control chars [EOL,LF...] in original-text-line\r\n\t\twhile ( textValue.charCodeAt(0) < 32 ) // if control-chars detected,\r\n\t\t{\r\n\t\t\tspans[i].text = spans[i].text+textValue.charAt(0); // add the control-char to the spantext \r\n\t\t\ttextValue = textValue.substr(1, textValue.length); // remove the added char from original text\r\n\t\t}\r\n\t}\r\n\treturn util.spansToXML(spans); // return compressed spans with control-char as xml-text\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** Restore Richtext-Spans from XML-converted Richtext and replace macro's by JavaScript eval-calls\r\n//*******************************************************************************************************\r\nfunction xmlToRich ( xmlText, macrosActive, macroStartMarker, macroEndMarker )\r\n//*******************************************************************************************************\r\n{\r\n\ttxtVisible = true;\t// preset the text-visibility-variable to true ( for TXON/TXOFF )\r\n\tif ( macroStartMarker == \"\" ) macroStartMarker = \"[[\"; // set default macroStartMarker\r\n\tif ( macroEndMarker == \"\" ) macroEndMarker = \"]]\"; // set default macroEndMarker\r\n\tvar macroA = xmlText.split( macroEndMarker );\t// split the XML-span-string at macro-end-markers\r\n\tfor ( var mc=0; mc<macroA.length; mc++ )\t// run over the macro-string-array\r\n\t{\r\n\t\tvar macroB = macroA[mc].split( macroStartMarker );\t// split the macro's at macro-start-markers\r\n\t\tif ( macroB.length>1 )\t// if macro-string-list contains more then one string\r\n\t\t{\r\n\t\t\twhile ( macroB[1].length > macroB[1].replace(\"&quot;\",'\"').length ) macroB[1] = macroB[1].replace(\"&quot;\",'\"');\t// convert all \"\r\n\t\t\twhile ( macroB[1].length > macroB[1].replace(\"&amp;\",'&').length ) macroB[1] = macroB[1].replace(\"&amp;\",'&');\t// convert all &\r\n\t\t\ttry { var errorMacro = macroB[1]; macroB[1] = eval(macroB[1]) }\t// set the macro-value by the macro-eval-result\r\n\t\t\tcatch(e) { app.alert(\"Macro error: \"+ errorMacro ) };\t// show errormessage dialog\r\n\t\t}\r\n\t\tmacroA[mc] = macroB.join( \"\" );\t// join the macro-parts\r\n\t}\r\n\tvar txtOn = macroA.join(\"\").split(txtOnCode);\t// split the whole text by text-on-codes\r\n\tfor ( var txtoo = 0; txtoo<txtOn.length; txtoo++ ) { txtOn[txtoo]=txtOn[txtoo].split(txtOffCode)[0] };\t// run over the text-on-strings and split the text-on-string by text-off-codes and keep the text-on-part only\r\n\tvar raw = txtOn.join(\"\");\r\n\tvar s = raw.replace(\"\\\\t\",\"\\t\"); while ( raw.length != s.length ) { raw=s; s=raw.replace(\"\\\\t\",\"\\t\") };\t// convert all tabs to \\t\r\n\tvar s = raw.replace(\"\\\\T\",\"\\t\"); while ( raw.length != s.length ) { raw=s; s=raw.replace(\"\\\\T\",\"\\t\") };\t// convert all Tabs to \\t\r\n\tvar s = raw.replace(\"\\\\r\",\"\\r\"); while ( raw.length != s.length ) { raw=s; s=raw.replace(\"\\\\r\",\"\\r\") };\t// convert all returns to \\r\r\n\treturn util.xmlToSpans ( raw ); // return the rich text span'S\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** Round any floatingpoint value to a defined number of digits\r\n//*******************************************************************************************************\r\nfunction Round( value, digits )\r\n//*******************************************************************************************************\r\n{\r\n\tvar x = value;\r\n\tif ( isNaN(x)== true ) x = 0; // NaN handling ************************\r\n\tif ( digits <= 0 ) return Math.round( value );\r\n\tfor ( var d=0; d<digits; d++ ) x *= 10;\r\n\tx = Math.round(x);\r\n\tif ( digits>0 ) for ( var d=0; d<digits; d++ ) x /= 10;\r\n\tx = String(x);\r\n\tif ( x.indexOf(\".\") < 0 ) x += '.';\r\n\tx += '000000000000000000000000000000000000000000000';\r\n\tvar p = x.indexOf(\".\") + digits + 1;\r\n\tx = x.substr( 0, p );\r\n\treturn x;\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** Get the STRing value from choosen language string-table and init the value if \"text\" is given\r\n//*******************************************************************************************************\r\nfunction STR( strName, text, strType )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = \"??STR(\\\"\"+strName+\"\\\")??\";\r\n\tvar stringType = \"gs\"; if ( arguments.length >= 3 ) stringType = strType;\r\n\tif ( ( String(Library.MacroWriting.toString()) != \"true\" ) || ( arguments.length == 1 ) )\r\n\t{\r\n\t\tvar langIdx = Library.Language.(@lcid == Library.CurrentLanguage.@lcid).childIndex();\r\n\t\tresult = Library.children()[langIdx].elements().( ( @type==stringType ) && ( @name==strName ) ).@text.toString().split(\"\\\\T\").join(\"\\t\");\r\n\t\tif ( result == \"\" ) result = \"??(\\\"\"+strName+\"\\\")??\";\r\n\t} else result = STRA( strName, text, stringType );\r\n\treturn result;\r\n}\r\n\r\nfunction STRA( strName, text, strType ) // update or create new string-entry in library table\r\n{\r\n\ttext = text.split(\"&#x9;\").join(\"\\\\T\");\t\r\n\ttext = text.split(\"\\t\").join(\"\\\\T\");\t\r\n\tvar stringType = \"gs\";\tif ( arguments.length >=3 ) stringType = strType;\r\n\tvar langIdx = Library.Language.(@lcid == lcidRef).childIndex(); // get language-index for reference language lcid ( english==9 )\r\n\tvar xList = Library.children()[langIdx].elements().( (@type==stringType) && (@name==strName) );\t// try to get the requested string\r\n\tif ( xList.length() == 0 )\t// if string does not exist, create it new\r\n\t{\r\n\t\tvar sx = <String/>;\tsx.@type = stringType;\t// setup new child-string\r\n\t\tsx.@name = strName;\tsx.@text = text;\r\n\t\tLibrary.children()[langIdx].insertChildAfter( null, sx );\t// insert new child on position 0 in the list\r\n\t}\r\n\telse\t// if string exists, \r\n\t{\r\n\t\tvar stringIdx = Library.children()[langIdx].elements().( ( @type == stringType ) && ( @name==strName ) ).childIndex(); // get the list-index of the string\r\n\t\tLibrary.children()[langIdx].elements()[stringIdx].@text = text;\t// set the text-parameter\r\n\t}\r\n\tLibrary_Save();\t// save the Library after new creatin or change of a string\r\n\treturn text.split(\"\\\\T\").join(\"\\t\");\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** Text-control \"TextOn\" depending on given boolean parameter TXON(true) = TXON();\r\n//*******************************************************************************************************\r\nfunction TXON( value )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = true;\r\n\tif ( arguments.length == 1 ) result = value;\r\n\tif ( result == false ) return txtOffCode;\r\n\treturn txtOnCode;\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** Text-control \"TextOff\" depending on given boolean parameter TXOFF(true) = TXOFF();\r\n//*******************************************************************************************************\r\nfunction TXOFF( value )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = false;\r\n\tif ( arguments.length == 1 ) result = value;\r\n\tif ( result == true ) return txtOffCode;\r\n\treturn txtOnCode;\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** If Selected - boolean check of a names in the string-parameter ifSel(\"Hallo\")\r\n//*******************************************************************************************************\r\nfunction ifSel( stringName )\r\n//*******************************************************************************************************\r\n{\r\n\treturn isSelected( stringName );\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** If All Selected - boolean check on names in the string-array parameter ifSelAll([\"Hallo\",\"Grobi\"])\r\n//*******************************************************************************************************\r\nfunction ifSelAll( stringArray )\r\n//*******************************************************************************************************\r\n{\r\n\tfor ( var x=0; x<stringArray.length; x++ ) if ( isSelected(stringArray[x])==false ) return false;\r\n\treturn true;\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** If One Selected - boolean check on names in the string-array parameter ifSelOne([\"Hallo\",\"Grobi\"])\r\n//*******************************************************************************************************\r\nfunction ifSelOne( stringArray )\r\n//*******************************************************************************************************\r\n{\r\n\tfor ( var x=0; x<stringArray.length; x++ ) if ( isSelected(stringArray[x])==true ) return true;\r\n\treturn false;\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** If None Selected - boolean check on names in the string-array parameter ifSelNone([\"Hallo\",\"Grobi\"])\r\n//*******************************************************************************************************\r\nfunction ifSelNone( stringArray )\r\n//*******************************************************************************************************\r\n{\r\n\tfor ( var x=0; x<stringArray.length; x++ ) if ( isSelected(stringArray[x])==true ) return false;\r\n\treturn true;\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** Sum Selection - int-number of selected names in the string-array param. sumSel([\"Hallo\",\"Grobi\"])\r\n//*******************************************************************************************************\r\nfunction sumSel( stringArray )\r\n{\r\n\tvar result = 0;\r\n\tfor ( var x=0; x<stringArray.length; x++ ) if ( isSelected(stringArray[x])==true ) result++;\r\n\treturn result;\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** Maximum Value - Maximum of given numeric array ([ 5, 0, 7 ])\r\n//*******************************************************************************************************\r\nfunction maxVal( numArray )\r\n{\r\n\treturn Math.max( numArray );\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** Minimum Value - Minimum of given numeric array ([ 5, 0, 7 ])\r\n//*******************************************************************************************************\r\nfunction minVal( numArray )\r\n{\r\n\treturn Math.min( numArray );\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** LISTLOAD loads a \";\"-separated table with column-names as headline \r\n//*******************************************************************************************************\r\nfunction LISTLOAD( listName )\r\n//*******************************************************************************************************\r\n{\r\n\tIniListArray = [];  // List-array cleared\r\n\tvar lists = <tables/>; \r\n\tlists.insertChildBefore(null, XML(this.getField(\"Pandora\").value).Tables.elements([listName]) );\t// get XML-list with tables as childs\r\n\tfor each ( var tab in lists.children() ) \t// run through all table-children\r\n\t\tif ( tab.@lcid.toString().split(\";\").indexOf(\"-1\")>=0 ) IniListArray = tab.toString().split(\"\\n\");\t// get reference-table\r\n\tfor each ( var tab in lists.children() ) \t// run through all table-children\r\n\t\tif ( tab.@lcid.toString().split(\";\").indexOf(lcidInUse+\"\")>=0 ) IniListArray = tab.toString().split(\"\\n\");\t// get language depending table (if available)\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** LISTVAL reads a value of a trans-column's line from a given ref-colum-/ref-item-name\r\n//*******************************************************************************************************\r\nfunction LISTVAL( refColumnName, refColumnItemName, transColumnName )\r\n{\r\n\tvar result = \"LISTVAL(?)\";\r\n\tif ( IniListArray.length != 0 )\r\n\t{\r\n\t\tvar Header = IniListArray[0].split(\";\");\r\n\t\tvar refColNum = Header.indexOf(refColumnName); \r\n\t\tvar transColNum = Header.indexOf(transColumnName); \r\n\t\tresult = \"?\";\r\n\t\tif ( (refColNum>=0) && (transColNum>=0) ) for ( var y=1; y<IniListArray.length; y++ )\r\n\t\t{\r\n\t\t\tvar cells = IniListArray[y].split(\";\");\r\n\t\t\tif ( cells[refColNum] == refColumnItemName ) { result = cells[transColNum]; break }\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n//*******************************************************************************************************\r\n//**** TABLOAD loads a \";\"-separated table with unit-names as headline and value-names as first row\r\n//*******************************************************************************************************\r\n//*******************************************************************************************************\r\nfunction TABLOAD( tableName )\r\n//*******************************************************************************************************\r\n{\r\n\tTableObj = {};  // clear the Table-object\r\n\tvar TableRaw = new XML(this.getField(\"Pandora\").value).Tables.elements([tableName]).toString().split(\"\\n\"); // read the tables lines as a splitted array\r\n\tTableObj[\"Header\"] = TableRaw[0].split(\";\");  // create the header-list from the top table-line\r\n\tTableObj[\"Header\"].shift();  // erase the index-field at coordinate 0,0\r\n\tTableObj[\"HeaderSelected\"]=[];  // create the header-list from selected units only\r\n\tfor ( var x=0; x<TableObj[\"Header\"].length; x++ )  // run over all header entries\r\n\t{\r\n\t\tif ( isSelected( TableObj[\"Header\"][x] )) TableObj[\"HeaderSelected\"].push(TableObj[\"Header\"][x]);  // if selected unit, push the unit-name to HeaderSelected,\r\n\t\telse TableObj[\"HeaderSelected\"].push(\"\");  // else push empty string\r\n\t}\r\n\tfor ( var x=1; x<TableRaw.length; x++ )  // run over all remaining table-lines (1..n)\r\n\t{\r\n\t\tvar column = TableRaw[x].split(\";\");  // split the actual line to it's single columns\r\n\t\tvar name = column.shift();  // remove the first-column's name from column\r\n\t\tTableObj[name] = column;  // create a table list named as the first column with the remaining column-values\r\n\t}\r\n}\t\r\n\r\n//*******************************************************************************************************\r\n//**** TABSTR summarizes the value of all selected units or combined with the units in the name-list\r\n//*******************************************************************************************************\r\nfunction TABSTR( valueName, colNameList )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = \"\";  // preset the result value\r\n\tfor ( var x=0; x<TableObj.HeaderSelected.length; x++ ) if ( String( TableObj.HeaderSelected[x].toString() ) != \"\" ) // run over all selected unit names\r\n\t{\r\n\t\tswitch ( arguments.length ) // switch to the function-mode defined by the number of function-arguments\r\n\t\t{\r\n\t\t\tcase 1: \t{ result += TableObj[valueName][x] } break; // get the summarised strings of all selected columns\r\n\t\t\tcase 2: \t{ if ( colNameList.indexOf(TableObj.HeaderSelected[x]) >= 0 ) result += TableObj[valueName][x] } break;  // calculate the sum of selected & defined unit's-values\r\n\t\t\tdefault:\treturn 'TABSTR: wrong parameters!\\rUsage:\\rTABSTR(\"P1\",[P2]) parameter P2 is optional\\rTABSTR(\"valueName\",[\"unit1\",\"unit2\", ... ,\"unitN\"])';  // show error-message if arguments are wrong\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** TABSUM summarizes the value of all selected units or combined with the units in the name-list\r\n//*******************************************************************************************************\r\nfunction TABSUM( valueName, nameList )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = 0;  // preset the result value\r\n\tfor ( var x=0; x<TableObj.HeaderSelected.length; x++ ) if ( String( TableObj.HeaderSelected[x].toString() ) != \"\" ) // run over all selected unit names\r\n\t{\r\n\t\tswitch ( arguments.length ) // switch to the function-mode defined by the number of function-arguments\r\n\t\t{\r\n\t\t\tcase 1: \t{ result += parseFloat(\"0\"+TableObj[valueName][x]) } break; // calculate the sum of all selected unit's-values\r\n\t\t\tcase 2: \t{ if ( nameList.indexOf(TableObj.HeaderSelected[x]) >= 0 ) result += parseFloat(\"0\"+TableObj[valueName][x]) } break;  // calculate the sum of selected & defined unit's-values\r\n\t\t\tdefault:\treturn 'TABSUM: wrong parameters!\\rUsage:\\rTABSUM(\"P1\",[P2]) parameter P2 is optional\\rTABSUM(\"valueName\",[\"unit1\",\"unit2\", ... ,\"unitN\"])';  // show error-message if arguments are wrong\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** TABMAX reads the maximum value of all selected units or combined with the units in the name-list\r\n//*******************************************************************************************************\r\nfunction TABMAX( valueName, nameList )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = 0;  // preset the result value\r\n\tfor ( var x=0; x<TableObj.HeaderSelected.length; x++ ) if ( String(TableObj.HeaderSelected[x].toString() ) != \"\" ) // run over all selected unit names\r\n\t{\r\n\t\tswitch ( arguments.length ) // switch to the function-mode defined by the number of function-arguments\r\n\t\t{\r\n\t\t\tcase 1: \t{ if ( result<parseFloat(\"0\"+TableObj[valueName][x]) ) result=parseFloat(\"0\"+TableObj[valueName][x]) } break; // if result<current unit's value, set result\r\n\t\t\tcase 2: \t{ \r\n\t\t\t\t\t\t\tif ( nameList.indexOf(TableObj.HeaderSelected[x]) >= 0 )  // if the current unit is in the parameter-list,\r\n\t\t\t\t\t\t\t\tif ( result<parseFloat(\"0\"+TableObj[valueName][x]) ) result=parseFloat(\"0\"+TableObj[valueName][x])  // if result<current unit's value, set result\r\n\t\t\t\t\t\t} break;\r\n\t\t\t\t\t\t\r\n\t\t\tdefault:\treturn 'TABMAX: wrong parameters!\\rUsage:\\rTABMAX(\"P1\",[P2]) parameter P2 is optional\\rTABMAX(\"valueName\",[\"unit1\",\"unit2\", ... ,\"unitN\"])';  // show error-message if arguments are wrong\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** TABMIN reads the minimum value of all selected units or combined with the units in the name-list\r\n//*******************************************************************************************************\r\nfunction TABMIN( valueName, nameList )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = 0; // preset the result value\r\n\tswitch ( arguments.length ) // depending on the arguments\r\n\t{\r\n\t\tcase 1: { result = TABMAX( valueName ) };  // preset the result with the maximum value of selected units\r\n\t\tcase 2: { result = TABMAX( valueName, nameList) }; // preset the result with the maximum value of selected units from name-list\r\n\t}\r\n\tfor ( var x=0; x<TableObj.HeaderSelected.length; x++ ) if ( String(TableObj.HeaderSelected[x].toString()) != \"\" )  // run over all selected unit names\r\n\t{\r\n\t\tswitch ( arguments.length )  // switch to the function-mode defined by the number of function-arguments\r\n\t\t{\r\n\t\t\tcase 1: \t{ if ( result>parseFloat(\"0\"+TableObj[valueName][x]) ) result=parseFloat(\"0\"+TableObj[valueName][x]) } break;  // if result>current unit's value, set result\r\n\t\t\tcase 2: \t{ \r\n\t\t\t\t\t\t\tif ( nameList.indexOf(TableObj.HeaderSelected[x]) >= 0 )  // if the current unit is in the parameter-list,\r\n\t\t\t\t\t\t\t\tif ( result>parseFloat(\"0\"+TableObj[valueName][x]) ) result=parseFloat(\"0\"+TableObj[valueName][x]) // if result>current unit's value, set result\r\n\t\t\t\t\t\t} break;\r\n\t\t\tdefault:\treturn 'TABMIN: wrong parameters!\\rUsage:\\rTABMIN(\"P1\",[P2]) parameter P2 is optional\\rTABMIN(\"valueName\",[\"unit1\",\"unit2\", ... ,\"unitN\"])';  // show error-message if arguments are wrong\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\n//*******************************************************************************************************\r\n//**** TABCOUNT counts the non-zero-values of selected units or combined with the units in the name-list\r\n//*******************************************************************************************************\r\nfunction TABCOUNT( valueName, nameList )\r\n//*******************************************************************************************************\r\n{\r\n\tvar result = 0; // preset the result value\r\n\tfor ( var x=0; x<TableObj.HeaderSelected.length; x++ ) if ( String( TableObj.HeaderSelected[x].toString() )  != \"\" )  // run over all selected unit names\r\n\t{\r\n\t\tswitch ( arguments.length )  // switch to the function-mode defined by the number of function-arguments\r\n\t\t{\r\n\t\t\tcase 1: \t{ if ( parseFloat(\"0\"+TableObj[valueName][x]) != 0 ) result++ } break;  // if current unit's value not zero, increase result\r\n\t\t\tcase 2: \t{ \r\n\t\t\t\t\t\t\tif ( nameList.indexOf(TableObj.HeaderSelected[x]) >= 0 )  // if the current unit is in the parameter-list,\r\n\t\t\t\t\t\t\t\tif ( parseFloat(\"0\"+TableObj[valueName][x]) != 0 ) result++;   // if current unit's value not zero, increase result\r\n\t\t\t\t\t\t} break;\r\n\t\t\tdefault:\treturn 'TABCOUNT: wrong parameters!\\rUsage:\\rTABCOUNT(\"P1\",[P2]) parameter P2 is optional\\rTABCOUNT(\"valueName\",[\"unit1\",\"unit2\", ... ,\"unitN\"])';  // show error-message if arguments are wrong\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r"
  },
  {
    "type": "document",
    "name": "TransmitData",
    "code": "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ############################################################################################################################\r\n// Container:\tTransmitData\r\n// Created by:\tJrg Dbritz\r\n// last update:\t17.03.2012\r\n// 17.03.2012:\tDEBUGMSG function calls removed from transmitToCRMSystem() and transmitInit()\r\n// ############################################################################################################################\r\n\r\nvar guid = \"\";\t// web-browser URL parameter ( UID )\r\nvar srvAddress = \"\";\t// server-address to submit data\r\nvar srvFileName = \"ProcessArticleList.ashx#FDF\";\t// default filename on server\r\nvar srvProtocol = \"HTML\";\t// Transmision protocol\r\nvar srvMessage = \"\";\t// message-string\r\nvar submitParam = {};\r\n\r\nvar inTransmission = false;\r\n\r\n//**************************************************************************************************************************\r\n//*** Setup the transmission-environment ( gui, server-address and submit-button )\r\n//**************************************************************************************************************************\r\nfunction transmitInit()\r\n{\r\n\tsubmitParam.cSubmitAs = srvProtocol;\t// define submit-protocol type\r\n\tsubmitParam.aFields = [\"Transmitter\"];\t// data-saving field name\r\n\tsubmitParam.cCharset = \"utf-8\";\t// character set used in transmitted data\r\n\tif ( Registry.Internals.settings.detectExternal.@value==true )\t// if browser detection is enabled\r\n\tif ( this.external == true )\t// if opened in browser via web-url\r\n\tif ( this.URL.indexOf(\"?\") >= 0 )\t// if get-parameters added with \"?\" as marker\r\n\tif ( this.URL.length > this.URL.indexOf(\"?\") )\t// if marker \"?\" is followed by additional parameters\r\n\t{\r\n\t\tvar guidA = this.URL.substring(this.URL.indexOf(\"?\") + 1).toLowerCase().match(/%7b(.+)%7d/);\t// extract guid parameter-list-array\r\n\t\tif ( guidA.length > 0 ) guid = guidA[1].toString();\t// extract guid-parameter #1\r\n\t\tsrvAddress = this.URL.substring(0, this.URL.lastIndexOf(\"/\") + 1);\t// extract the url-address\r\n\t\tsubmitParam.cURL = srvAddress + srvFileName;\t// create cURL-address in submit-params\r\n\t\tif ( ( guid != \"\" ) && ( srvAddress != \"\" ) ) \t// if guid & srvAddress exist\r\n\t\t{\r\n\t\t\tRegistry.Internals.menuItems.Btn_SubmitCRM.@visible=true;\t// ... if browser, guid and srvAddress found, SubmitCRM-btn will be enabled\r\n\t\t\tarrangeMenuButtons();\t// rearrange the menu-buttons\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//**************************************************************************************************************************\r\n//*** Do the transmission to the CRM / called by ButtonHandler-Button\r\n//**************************************************************************************************************************\r\nfunction transmitToCRMSystem()\r\n{\r\n\tinTransmission = true;\r\n\tvar oXML = new XML( createXMLOrder().toString() );\t// create order-XML-value\r\n\toXML.configurationtarget.idsource = \"FalconCRM\";\t// set XML-target-ID-source\r\n\toXML.configurationtarget.idtypename = \"opportunityproduct\";\t// set XML-target-ID-type\r\n\toXML.configurationtarget.id = guid;\t// set XML-order id-code to opportunity-id\r\n\toXML.foliant.url = srvAddress;\t// store XML-foliant-data target-server-address\r\n\tthis.getField(\"Transmitter\").value = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + oXML.toString();\t// add XML-version- and char-code-tag\r\n\tvar txt = STR(\"dlgSubmitToCRM\",\"Do you want to submit the current configuration?\",\"dc\");\r\n\ttxt+= \"\\rGUID:\"+guid;\r\n\ttxt+= \"\\rURL:\"+srvAddress;\r\n\ttxt+= \"\\rFILE:\"+srvFileName;\r\n\tvar nButton = app.alert({cMsg: txt, cTitle: STR(\"dlgSubmitToCRMCapt\",\"Submit configuration\",\"dc\"), nIcon: 2, nType: 2});\r\n\tif ( nButton == 4 ) \r\n\t{\r\n\t\t//this.submitForm({ cURL: srvAddress + srvFileName, aFields: [\"Transmitter\"], cSubmitAs: srvProtocol });\t// submit the form-data\r\n\t\tthis.submitForm( submitParam );\t// submit the form-data from submitParam-configuration\r\n\t}\r\n\tthis.getField(\"Transmitter\").value = \"\";\r\n\tinTransmission = false;\r\n}\r\n\r\n//**************************************************************************************************************************\r\n//*** Initialise Foliant from XFDF-data loaded to field \"Transmitter\"\r\n//**************************************************************************************************************************\r\nfunction transmitInitFromXFDF() \r\n{\r\n\tvar s = this.getField(\"Transmitter\").value.split(\"?>\");\r\n\tfor ( var x in s ) if ( s[x].indexOf(\"<?\") >= 0 ) s[x] = s[x].substr( 0, s[x].indexOf(\"<?\") ); s = s.join(\"\\n\");\r\n\tif ( s.indexOf(\"<order\") >= 0 )\r\n\t{\r\n\t\tvar cfg = new XML( s ); \r\n\t\tif ( String(cfg.foliant.toString()) == \"\" ) return;\r\n\t\tif ( String(cfg.foliant.idCode.toString()) != \"\" ) if ( cfg.foliant.idCode.toString() != Registry.Internals.ident.idCode.@value.toString() ) \r\n\t\t{\r\n\t\t\tvar msg = STR(\"dlgWrongFDFData\",\"Configuring from loaded FDF-Data not possible! Foliant-idCode and FDF-idCode mismatch!\",\"dc\");\r\n\t\t\tmsg += '\\r\\rFoliant-ID: '+Registry.Internals.ident.idCode.@value.toString()+\"\\rXFDF-ID: \"+cfg.foliant.idCode.toString();\r\n\t\t\tapp.alert({cMsg: msg, cTitle:\"XFDF-Error\"});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar langXFDF = String(cfg.foliant.language.toString());\t\t// get the CRM-Language from FDF\r\n\t\tif ( langXFDF != \"\" )\r\n\t\t{\r\n\t\t\tvar langX = Library.Language.(@lcid == langXFDF)+\"\";\t// get the language by lcid-code\r\n\t\t\tif ( langX != \"\" )\t// if langXFDF in langX and not empty ... else keep the current language\r\n\t\t\t{\r\n\t\t\t\tLibrary.CurrentLanguage.@lcid = langXFDF;\t// set the lcid-code in Library\r\n\t\t\t\tLibrary.CurrentLanguage.@name = Library.Language.(@lcid == langXFDF).@name;\t// set the language name in Library\r\n\t\t\t\tLibrary_Save();\t// save the Library to Babelfish\r\n\t\t\t\tLibrary_Init();\t// re-init the Library\r\n\t\t\t}\r\n\t\t}\r\n\t\tresetAll();\t// reset the selection\r\n\t\tfor each ( var ci in cfg.foliant.Choices.children() ) // init the choices of multiple-selectable icons\r\n\t\t{\r\n\t\t\tif ( String(Registry.System.Logic.FunctionGroups.Choice.child(ci.localName()).toString())+\"\" != \"\" )\r\n\t\t\tRegistry.System.Logic.FunctionGroups.Choice.child(ci.localName()).@items = ci;\r\n\t\t}\r\n\t\tregistrySave();\r\n\t\tvar pageName = cfg.foliant.visiblePage.toString();\t// available pageName as indicator for finalised selection \r\n\t\tif ( pageName != \"\" )\t// if pageName is available, continue with configuring the Foliant, else keep the Foliant in reset stage\r\n\t\t{\r\n\t\t\tvar cfgList = cfg.foliant.Clicked.split(\";\");\t// get the list of clicked icons ( no added !! )\r\n\t\t\tbackSelection = true;\t// set backSelection for automatic choice-item selection during virtual icon-selection\r\n\t\t\tfor ( var x = 0; x<cfgList.length; x++ ) iconHandler(cfgList[x]);\t// virtually re-click the listed icons for reconfiguration\r\n\t\t\tbackSelection = false;\t// reset backSelection to standard\r\n\t\t\tvar iconsMissed = \"\";\t// string to collect the missed icon names\r\n\t\t\tvar oSel = cfg.foliant.Selection.toString().split(\";\");\t// saved order-selection as string-array\r\n\t\t\tvar fSel = Registry.System.Logic.Selection.toString();\t// selection-entries in foliant after reconfiguration as array\r\n\t\t\twhile ( fSel.indexOf(\";;\")>=0 ) fSel = fSel.replace(\";;\",\";\"); fSel = fSel.split(\";\");\t// cleanup the string from empty entries ;;;;\r\n\t\t\tfor ( var x in oSel ) if ( fSel.indexOf(oSel[x]) < 0 ) { iconsMissed += oSel[x]+','; iconHandler( oSel[x] ); }\t// if a icon is not selected after reconfiguration, virtually re-click the icon\r\n\t\t\tfinaliseActionLogic();\t// finalise the selection to genreate the lists for IconStatus\r\n\t\t\tvar itemsMissed = \"\";\t// string to collect the names of missed items\r\n\t\t\tvar oStat = cfg.foliant.IconStatus.toString().split(\";\");\t// create array from the orders itemlist\r\n\t\t\tfor ( var x in oStat ) if ( isSelected(oStat[x]) == false ) itemsMissed += oStat[x]+', ';\t// run over the IconStatus to compare selected items in Foliant and List\r\n\t\t\tvar msg = STR(\"dlgConfigLogicError\",\"The following items were not selected during the automatical reconfiguration from the loaded FDF-Data due to a system-validation-logic change!\",\"dc\");\r\n\t\t\tif ( itemsMissed+iconsMissed != \"\" ) app.alert( msg + '\\r\\rItems:'+itemsMissed+'\\r\\rIcons:'+iconsMissed);\t// information dialog about missed items\r\n\t\t\tthis.getField(\"LogicChart\").display = display.hidden;\t// hide the Logic-Chart for result-page displaying\r\n\t\t\tshowPage ( \"@\"+pageName, true ); Library.VisiblePage = pageName; Library_Save();\t// generate and show the results-page\r\n\t\t}\r\n\t\t// set the parameter values\r\n\t\tif ( cfg.foliant.targetURL+\"\" != \"\" ) srvAddress = cfg.foliant.targetURL.toString();\r\n\t\tif ( cfg.foliant.targetFileName+\"\" != \"\" ) srvFileName = cfg.foliant.targetURL.toString();\r\n\t\tif ( cfg.foliant.targetProtocol+\"\" != \"\" ) srvProtocol = cfg.foliant.targetProtocol.toString();\r\n\t\tif ( cfg.foliant.targetMessage+\"\" != \"\" ) srvMessage = cfg.foliant.targetMessage.toString();\r\n\t\t// set the defined values from XFDF-XML-structure\r\n\t\tfor each ( var x in cfg.foliant.submitParam.children() )\t// parse and setup the submitForm-parameters from Transmitter\r\n\t\t{\r\n\t\t\tvar value = x.@value.toString();\r\n\t\t\tvar name = x.localName();\r\n\t\t\tswitch ( name )\r\n\t\t\t{\r\n\t\t\t\tcase \"aFields\": { value = value.split(\",\") }; break;\r\n\t\t\t\tcase \"aPackets\": { value = value.split(\",\") }; break;\r\n\t\t\t}\r\n\t\t\tsubmitParam[name] = value;\r\n\t\t} \r\n\t}\r\n\tmarkedDirty = false;\t// set dirty to \"un-changed\"\r\n\tthis.dirty = markedDirty;\r\n}\r\n\r\n\r\n//***********************************************************************************************************\r\n// create order-list as XML-structure from system-selection\r\n//***********************************************************************************************************\r\nfunction createXMLOrder()\r\n{\r\n\tLISTLOAD(\"ArticleCodes\");\t// load list-data from Pandora-Table area\r\n\tvar nameColumn = IniListArray[0].split(\";\").indexOf(\"name\");\t// detect name-column number\r\n\tvar codeColumn = IniListArray[0].split(\";\").indexOf(\"code\");\t// detect code-column number\r\n\tvar mainItemList = Registry.System.Logic.MainItem.split(\";\");\t// get the main-unit list from Registry\r\n\tvar order = <order><configurationtarget/><systemCode/><article/><foliant><Clicked/><Selection/><IconStatus/><Choices/></foliant></order>;\t// initialise the order-XML-structure\r\n\tfor ( var x=1; x<IniListArray.length; x++ )\t// run over all list-lines\r\n\t{\r\n\t\tvar itemName = IniListArray[x].split(\";\")[nameColumn]+\"\";\t// get the list column for itemNames\r\n\t\tvar itemCode = IniListArray[x].split(\";\")[codeColumn]+\"\";\t// get the list column for itemCodes\r\n\t\tvar idx = order.article.art.(@code == itemCode);\t// get the article with @code == itemCode\r\n\t\tif ( idx.length() == 0 )\t// if XML idx is empty (length==0)\r\n\t\t{\t\r\n\t\t\torder.article.insertChildAfter( null, <art/> );\t// create new article\r\n\t\t\torder.article.art[0].@code = itemCode;\t// set child's @code to article-code\r\n\t\t\torder.article.art[0].@mainUnit = 0;\t// set mainUnit-marker to default=0\r\n\t\t\torder.article.art[0].@quantity = 0;\t// set @quantity\r\n\t\t\torder.article.art[0].@item = \"\";\t// set @item-name as \";\"-sep stringlist\r\n\t\t\tidx=0;\t// set idx to first childIndex -> 0\r\n\t\t} \r\n\t\telse idx = order.article.art.(@code == itemCode).childIndex();\t// if idx not empty, set idx to childIndex\r\n\t\tif ( mainItemList.indexOf(itemName) >= 0 ) order.article.art[idx].@mainUnit = 1;\t// set MainUnit-attribute if ...\r\n\t\tif ( isSelected( itemName ) == true ) order.article.art[idx].@quantity ++;\t// set @quantity\r\n\t\tif ( ( mainItemList.indexOf(itemName) >= 0 ) &&  isSelected( itemName ) ) order.systemCode = itemCode;\t// set systemCode if ...\r\n\t\torder.article.art[idx].@item = order.article.art[idx].@item+itemName+\";\";\t// set @item-name as \";\"-sep stringlist\r\n\t}\r\n\torder.foliant.Clicked = Registry.System.Logic.Clicked.toString();\t// add the Foliant's clicked-list\r\n\torder.foliant.Selection = Registry.System.Logic.Selection.toString();\t// add the Foliant's selection-list\r\n\torder.foliant.IconStatus = Registry.System.Logic.IconStatus.toString();\t// add the Foliant's Icons and Items-list\r\n\tfor each ( var x in Registry.System.Logic.FunctionGroups.Choice.children() )\t// run over all Choice-entries ...\r\n\t\torder.foliant.Choices.insertChildBefore(null,XML( \"<\"+x.localName()+\">\"+x.@items.toString()+\"</\"+x.localName()+\">\" ));\t// ... and save the choosen values\r\n\torder.foliant.idCode = Registry.Internals.ident.idCode.@value.toString();\t// add the idCode of the specific Foliant\r\n\torder.foliant.language = Library.CurrentLanguage.@lcid.toString();\t// save the current used language\r\n\torder.foliant.visiblePage = Library.VisiblePage.toString();\t// save the current visible results-page\r\n\t\r\n\torder.foliant.targetURL = srvAddress;\r\n\torder.foliant.targetFileName = srvFileName;\r\n\torder.foliant.targetProtocol = srvProtocol;\r\n\torder.foliant.targetMessage = srvMessage;\r\n\torder.foliant.submitParam = \"\";\r\n\tfor ( var sp in submitParam ) order.foliant.submitParam.insertChildBefore( null, XML(\"<\"+sp+\" value=\\\"\"+submitParam[sp]+\"\\\"/>\") );\r\n\t\r\n\torder.complete = Boolean([display.visible,display.hidden].indexOf(this.getField(\"Btn_IncompleteSys\").display));\t// save the validation-status\r\n\treturn order;\r\n}\r\n\r\n\r"
  },
  {
    "type": "document",
    "name": "_startup",
    "code": "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar FoliantVersionMain = \"1\";\r\nvar FoliantVersionSub = \"10\";\r\n\r\nvar guid = \"\";\t// web-browser URL parameter ( UID )\r\n\r\nfunction _startup() \r\n{\r\n\t// activate the startup-overlay-screen \r\n\tvar f = this.getField(\"Btn_VersionCheckOverlay\");\r\n\tf.delay = true;\r\n\tf.display = display.visible;\r\n\tf.rect = [0, 842, 595, 0 ];\r\n\tvar msgVersionWarning = f.userName;\r\n\tf.delay = false;\r\n\t// check the current version of the PDF-viewer for compatibility\r\n\tvar reqVersion = 8.0;\r\n\tvar appInfo = {};\r\n\t\tappInfo.Type = app.viewerType; \r\n\t\tappInfo.Variation = app.viewerVariation;\r\n\t\tappInfo.Version = app.viewerVersion;\r\n\t\tappInfo.VersionText = 'v'+appInfo.Version; if (appInfo.VersionText.indexOf(\".\")<0) appInfo.VersionText += '.0';\r\n\tif ( appInfo.Version < reqVersion )\r\n\t{\r\n\t\tvar nButton = app.alert({cMsg: msgVersionWarning, cTitle: appInfo.Type+'  ( '+appInfo.Variation+' )  '+appInfo.VersionText, nIcon: 1, nType: 1 });\r\n\t\tif ( nButton == 2 ) this.closeDoc(); \r\n\t}\r\n} \r\n\r\n_startup();\t// call the startup-function first - before XML-activities to protect from too old application versions\r\nthis.disclosed = true;\t// make PDF detectable for other PDF-sessions\r\nvar markedDirty = this.dirty; // create variable to indicate the document's changes to be saved ( per function )\r\nvar backSelection = false;\t// Indicator for \"Back-Button\" has been pressed\r\nvar ownerId = 0;\t// set Owner indicator to default;\r\n\r\n// initialise and check the Registry-XML-structure\r\nregistryInit();\r\nif ( String(Registry.System.Atoms.toString()) ==\"\") { Registry.System.Atoms=\"\"; registrySave() }\t// check for empty Atoms-structure, if empty, create \"\" value on it\r\nif ( String(Registry.System.Logic.toString()) ==\"\") { Registry.System.Logic=\"\"; registrySave() }\t// check for empty Logic-structure, if empty, create \"\" value on it\r\n\r\n// define the registry internal version values from here\r\nRegistry.Internals.ident.@versionMain=FoliantVersionMain;\r\nRegistry.Internals.ident.@versionSub=FoliantVersionSub;\r\n\r\n// initialise the Library-XML-Structure\r\nLibrary_Init();\r\n\r\n// call initialisation functions\r\n\r\n// create the info-text for the status-bar ( BottomLine )\r\nsetBottomBarInfoLine();\t\r\n\r\n// set the submit-button to visible by default\r\nRegistry.Internals.menuItems.Btn_SubmitCRM.@visible=true;\t\r\n\r\n// is browser-detection enabled ??? If yes ...\r\nif ( String(Registry.Internals.settings.detectExternal.@value) == \"true\" ) \t\r\n\tif ( ( this.external == false ) || ( guid == \"\" ) ) Registry.Internals.menuItems.Btn_SubmitCRM.@visible=false;\t// ... and no browser or no guid parameter found, SubmitCRM-btn will be hidden\r\n\r\n// set all menu buttons to Registry-defined values\r\narrangeMenuButtons();\t\r\n\r\n// switch off focus rectangles for buttons ( icons )\r\napp.focusRect = false;\t\r\n\r\n// switch off highliting of edit fields\r\napp.runtimeHighlight = false;\t\r\n\r\n// set \"dirty\"-value to the startup-value\r\nthis.dirty = markedDirty;\r\n\r\n// save all re-initialised values in Registry-XML-variable\r\nregistrySave();\r\n\r\n// remove the startup-overlay\r\nif ( ownerId.toString() == \"28653030\" ) this.getField(\"Btn_VersionCheckOverlay\").rect = [0, 0, 0, 0 ];\r\n\r\n// identify the document by internal registry values / returns the ident-structure\r\nvar identifyDoc = Registry.Internals.ident;\r\n\r\n// initialise transmission-system\r\ntransmitInit();\r\n\r\nthis.dirty = false;\r\nmarkedDirty = this.dirty; // indicate, there where no document's changes to be saved\r\n\r\n\r\n\r\n\r\n// ############################################################################################################################\r\n// ############################################################################################################################\r\n// ############################################################################################################################\r\n// ############################################################################################################################\r\n// ############################################################################################################################\r\n\r\n\r\n\r\n\r"
  },
  {
    "type": "field_action",
    "field": "Transmitter",
    "action": "/F",
    "code": "\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif ( typeof ( inTransmission ) == \"undefined\" ) inTransmission = false;\r\nif ( inTransmission == false ) \r\n{\r\n\ttransmitInitFromXFDF();\r\n\tevent.value = \"\";\r\n}\r\n\r"
  }
]