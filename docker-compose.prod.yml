version: '3.8'

services:
  # KRAI Engine API
  krai-engine:
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: krai-engine:latest
    container_name: krai-engine-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    networks:
      - krai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - ollama
    command: >
      gunicorn main:app
        --workers 4
        --worker-class uvicorn.workers.UvicornWorker
        --bind 0.0.0.0:8000
        --log-level info
        --access-logfile /app/logs/access.log
        --error-logfile /app/logs/error.log
        --timeout 300
        --keep-alive 5

  # Ollama (AI Models)
  ollama:
    image: ollama/ollama:latest
    container_name: krai-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - krai-network
    # GPU support (optional, uncomment if you have NVIDIA GPU)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: krai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - krai-engine
    networks:
      - krai-network

  # Redis (optional, for caching)
  # redis:
  #   image: redis:7-alpine
  #   container_name: krai-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - krai-network
  #   command: redis-server --appendonly yes

volumes:
  ollama_data:
    driver: local
  # redis_data:
  #   driver: local

networks:
  krai-network:
    driver: bridge
