[Database] Complete adapter pattern implementation with live PostgreSQL testing

Key Achievements:
- Implemented complete database adapter pattern (Supabase, PostgreSQL, Docker)
- Created factory for adapter selection via DATABASE_TYPE env variable
- Maintained 100% backward compatibility with existing code
- Live-tested adapter switching with Docker PostgreSQL
- Exported Supabase data via REST API (73 rows: 14 manufacturers, 9 series, 50 products)
- Auto-loading seeds in Docker PostgreSQL on first start
- Comprehensive documentation and test suites

New Files (17):
- backend/services/database_adapter.py (abstract base class)
- backend/services/database_factory.py (factory pattern)
- backend/services/postgresql_adapter.py (asyncpg implementation)
- backend/services/docker_postgresql_adapter.py (Docker defaults)
- backend/services/supabase_adapter.py (refactored from DatabaseService)
- scripts/export_supabase_via_api.py (REST API export, no pg_dump needed)
- scripts/test_adapter_quick.py (quick validation)
- database/seeds/01_schema.sql + 02_minimal_seed.sql (generated)
- docs/database/ADAPTER_PATTERN.md + SEED_EXPORT_GUIDE.md
- tests/test_database_adapters.py (comprehensive test suite)

Modified Files (9):
- backend/services/database_service.py (backward compat wrapper)
- backend/services/database_service_production.py (backward compat wrapper)
- docker-compose.yml (added krai-postgres + seed volumes)
- .env.example (DATABASE_TYPE configuration)
- TODO.md (session statistics updated)

Tests: Quick test 100% (both Supabase and PostgreSQL)
Session: 10 hours (13:23-23:20)
Impact: Production-ready local development environment
