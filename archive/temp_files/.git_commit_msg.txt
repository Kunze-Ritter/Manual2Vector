[Error Code Extraction] Add structured-text fallback and OCR hooks

- TextExtractor now extracts layout-based text separately via rawdict parsing
- DocumentProcessor combines plain + structured text for error code extraction
- Added configurable flags: enable_structured_text, enable_ocr_fallback
- OCR stub _prepare_ocr_fallback ready for future implementation
- New diagnostic scripts: diagnose_structured_text.py, inspect_pdf_structured.py
- Updated TODO.md with completed tasks and session statistics

[Processors] Consolidate requirements and finalize documentation cleanup

- Remove duplicate backend/processors/requirements.txt (single source: backend/requirements.txt)
- Clean up unused _detect_language stub (langdetect implementation active)
- Expand README with structured_texts enrichment example
- Update product_type example to match ALLOWED_PRODUCT_TYPES (laser_printer)
- Add header cleanup toggle tests (enable/disable modes)
- Update TODO.md with session achievements and timestamp

Files changed:
- backend/processors/text_extractor.py: Add _extract_structured_text() method
- backend/processors/document_processor.py: Integrate structured texts, add OCR hook
- backend/config/error_code_patterns.json: Add extraction_rules flags
- scripts/diagnose_structured_text.py: Updated for new return signature
- TODO.md: Document completed work
- backend/processors/requirements.txt (deleted)
- backend/processors/text_extractor.py
- backend/processors/README.md
- backend/processors/chunker.py
- tests/test_chunker_header_cleanup.py
- TODO.md
