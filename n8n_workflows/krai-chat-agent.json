{
  "name": "KRAI Chat Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "krai-chat-agent"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message }}",
              "rightValue": "/status",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "status-check",
      "name": "Status Check?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message }}",
              "rightValue": "/search",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "search-query",
      "name": "Search Query?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message }}",
              "rightValue": "/models",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "model-lookup",
      "name": "Model Lookup?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message }}",
              "rightValue": "/help",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "help-request",
      "name": "Help Request?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/system_metrics?select=*&limit=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "supabase-status",
      "name": "Get System Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 180],
      "credentials": {
        "httpHeaderAuth": {
          "id": "supabase-auth",
          "name": "Supabase Auth"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/rpc/search_documents",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query_text",
              "value": "={{ $json.message.replace('/search ', '') }}"
            },
            {
              "name": "limit_count",
              "value": 5
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "supabase-search",
      "name": "Search Documents",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 180],
      "credentials": {
        "httpHeaderAuth": {
          "id": "supabase-auth",
          "name": "Supabase Auth"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/products?select=*&or=(model.ilike.*{{ $json.message.replace('/models ', '') }}.*,name.ilike.*{{ $json.message.replace('/models ', '') }}.*)&limit=10",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "supabase-models",
      "name": "Search Models",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 180],
      "credentials": {
        "httpHeaderAuth": {
          "id": "supabase-auth",
          "name": "Supabase Auth"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama3.2:latest"
            },
            {
              "name": "prompt",
              "value": "Du bist der KRAI Chat Agent. Antworte auf Deutsch und hilf bei Fragen zu Drucker-Manuals und Service-Dokumenten.\n\nFrage: {{ $json.message }}\n\nAntworte kurz und hilfreich."
            },
            {
              "name": "stream",
              "value": false
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "ollama-chat",
      "name": "Ollama Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format Status Response\nconst statusData = $input.first().json;\nconst response = {\n  status: 'System OK',\n  timestamp: new Date().toISOString(),\n  database: statusData ? 'Connected' : 'Error',\n  message: 'KRAI Engine ist online und bereit!'\n};\n\nreturn [{ json: response }];"
      },
      "id": "format-status",
      "name": "Format Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 60]
    },
    {
      "parameters": {
        "jsCode": "// Format Search Results\nconst searchResults = $input.first().json;\nlet response = {\n  message: 'Suchergebnisse:',\n  results: []\n};\n\nif (searchResults && Array.isArray(searchResults)) {\n  searchResults.forEach((result, index) => {\n    response.results.push({\n      rank: index + 1,\n      document: result.filename || 'Unknown',\n      content: result.content ? result.content.substring(0, 200) + '...' : 'No content',\n      relevance: result.similarity_score ? (result.similarity_score * 100).toFixed(1) + '%' : 'N/A'\n    });\n  });\n} else {\n  response.message = 'Keine Ergebnisse gefunden.';\n}\n\nreturn [{ json: response }];"
      },
      "id": "format-search",
      "name": "Format Search",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 60]
    },
    {
      "parameters": {
        "jsCode": "// Format Model Results\nconst modelResults = $input.first().json;\nlet response = {\n  message: 'Modell-Ergebnisse:',\n  models: []\n};\n\nif (modelResults && Array.isArray(modelResults)) {\n  modelResults.forEach((model, index) => {\n    response.models.push({\n      rank: index + 1,\n      name: model.name || 'Unknown',\n      model: model.model || 'Unknown',\n      manufacturer: model.manufacturer_name || 'Unknown',\n      series: model.product_series_name || 'Unknown'\n    });\n  });\n} else {\n  response.message = 'Keine Modelle gefunden.';\n}\n\nreturn [{ json: response }];"
      },
      "id": "format-models",
      "name": "Format Models",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 60]
    },
    {
      "parameters": {
        "jsCode": "// Help Response\nconst helpResponse = {\n  message: 'KRAI Chat Agent - Verfügbare Befehle:',\n  commands: [\n    '/status - System-Status prüfen',\n    '/search [text] - Dokumente durchsuchen',\n    '/models [name] - Modelle suchen',\n    '/help - Diese Hilfe anzeigen'\n  ],\n  examples: [\n    '/search Fehler Code 13',\n    '/models HP LaserJet',\n    '/status'\n  ]\n};\n\nreturn [{ json: helpResponse }];"
      },
      "id": "format-help",
      "name": "Format Help",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 60]
    },
    {
      "parameters": {
        "jsCode": "// Format AI Response\nconst aiResponse = $input.first().json;\nconst response = {\n  message: aiResponse.response || 'Keine Antwort erhalten.',\n  model: 'llama3.2:latest',\n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: response }];"
      },
      "id": "format-ai",
      "name": "Format AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 60]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}"
      },
      "id": "response",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Chat Webhook": {
      "main": [
        [
          {
            "node": "Status Check?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status Check?": {
      "main": [
        [
          {
            "node": "Get System Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Search Query?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Query?": {
      "main": [
        [
          {
            "node": "Search Documents",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Model Lookup?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model Lookup?": {
      "main": [
        [
          {
            "node": "Search Models",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Help Request?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Help Request?": {
      "main": [
        [
          {
            "node": "Format Help",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ollama Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get System Status": {
      "main": [
        [
          {
            "node": "Format Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Documents": {
      "main": [
        [
          {
            "node": "Format Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Models": {
      "main": [
        [
          {
            "node": "Format Models",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat": {
      "main": [
        [
          {
            "node": "Format AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Status": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Search": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Models": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Help": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format AI Response": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-10-01T08:00:00.000Z",
      "updatedAt": "2024-10-01T08:00:00.000Z",
      "id": "krai-chat-agent",
      "name": "KRAI Chat Agent"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-10-01T08:00:00.000Z",
  "versionId": "1"
}
