{
  "name": "KRAI AI Agent - Modern",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "krai-ai-agent-modern"
    },
    {
      "parameters": {
        "agentType": "chatAgent",
        "chatInput": "={{ $json.message }}",
        "options": {
          "systemMessage": "Du bist der KRAI AI Agent, ein intelligenter Assistent f체r technische Dokumentation und Service-Manuals. Du hilfst bei Fragen zu Druckern, Kopierern und technischen Ger채ten. Antworte immer auf Deutsch und sei hilfreich und pr채zise.",
          "temperature": 0.7,
          "maxTokens": 1000
        },
        "model": {
          "model": "llama3.2:latest",
          "baseURL": "http://host.docker.internal:11434",
          "apiVersion": "v1"
        }
      },
      "id": "ai-agent",
      "name": "AI Agent",
      "type": "n8n-nodes-base.aiAgent",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message }}",
              "rightValue": "/search",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "search-query",
      "name": "Search Query?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [240, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message }}",
              "rightValue": "/models",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "model-lookup",
      "name": "Model Lookup?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [240, 60]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message }}",
              "rightValue": "/status",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "status-check",
      "name": "Status Check?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [240, 420]
    },
    {
      "parameters": {
        "resource": "vectorSearch",
        "operation": "search",
        "query": "={{ $json.message.replace('/search ', '') }}",
        "limit": 5,
        "options": {
          "filter": {
            "metadata": "{}"
          }
        }
      },
      "id": "supabase-vector-search",
      "name": "Supabase Vector Search",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 180],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-api",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "getAll",
        "table": "products",
        "options": {
          "query": "={{ $json.message.replace('/models ', '') }}",
          "limit": 10
        }
      },
      "id": "supabase-models",
      "name": "Search Models",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 60],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-api",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "resource": "function",
        "operation": "execute",
        "functionName": "get_system_status",
        "options": {}
      },
      "id": "supabase-status",
      "name": "Get System Status",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 420],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-api",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "model": "llama3.2:latest",
          "baseURL": "http://host.docker.internal:11434"
        },
        "prompt": "Basierend auf den folgenden Suchergebnissen, beantworte die Frage des Benutzers:\n\nFrage: {{ $json.message }}\n\nSuchergebnisse:\n{{ $json.results.map(r => '- ' + r.content).join('\n') }}\n\nAntworte auf Deutsch und sei hilfreich:",
        "options": {
          "temperature": 0.7,
          "maxTokens": 500
        }
      },
      "id": "ollama-search-response",
      "name": "Ollama Search Response",
      "type": "n8n-nodes-base.ollama",
      "typeVersion": 1,
      "position": [680, 180]
    },
    {
      "parameters": {
        "model": {
          "model": "llama3.2:latest",
          "baseURL": "http://host.docker.internal:11434"
        },
        "prompt": "Basierend auf den folgenden Modell-Informationen, beantworte die Frage des Benutzers:\n\nFrage: {{ $json.message }}\n\nModelle:\n{{ $json.map(m => '- ' + m.name + ' (' + m.model + ') - ' + m.manufacturer_name).join('\n') }}\n\nAntworte auf Deutsch und sei hilfreich:",
        "options": {
          "temperature": 0.7,
          "maxTokens": 500
        }
      },
      "id": "ollama-models-response",
      "name": "Ollama Models Response",
      "type": "n8n-nodes-base.ollama",
      "typeVersion": 1,
      "position": [680, 60]
    },
    {
      "parameters": {
        "jsCode": "// Format Search Results for AI Agent\nconst searchResults = $input.first().json;\nconst userMessage = $('Chat Webhook').first().json.message;\n\nlet context = '';\nif (searchResults && searchResults.length > 0) {\n  context = 'Relevante Dokumente:\\n';\n  searchResults.forEach((result, index) => {\n    context += `${index + 1}. ${result.content.substring(0, 200)}...\\n`;\n  });\n}\n\nreturn {\n  message: userMessage,\n  context: context,\n  results: searchResults || []\n};"
      },
      "id": "format-search-context",
      "name": "Format Search Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format Models for AI Agent\nconst models = $input.first().json;\nconst userMessage = $('Chat Webhook').first().json.message;\n\nlet context = '';\nif (models && models.length > 0) {\n  context = 'Verf체gbare Modelle:\\n';\n  models.forEach((model, index) => {\n    context += `${index + 1}. ${model.name} (${model.model}) - ${model.manufacturer_name}\\n`;\n  });\n}\n\nreturn {\n  message: userMessage,\n  context: context,\n  models: models || []\n};"
      },
      "id": "format-models-context",
      "name": "Format Models Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 420]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  message: $json.message || $json.response || 'Antwort generiert',\n  timestamp: new Date().toISOString(),\n  source: $json.source || 'ai-agent'\n}) }}"
      },
      "id": "response",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Chat Webhook": {
      "main": [
        [
          {
            "node": "Search Query?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Model Lookup?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Status Check?",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Query?": {
      "main": [
        [
          {
            "node": "Supabase Vector Search",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model Lookup?": {
      "main": [
        [
          {
            "node": "Search Models",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status Check?": {
      "main": [
        [
          {
            "node": "Get System Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Search": {
      "main": [
        [
          {
            "node": "Format Search Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Models": {
      "main": [
        [
          {
            "node": "Format Models Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get System Status": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Search Context": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Models Context": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-10-01T08:00:00.000Z",
      "updatedAt": "2024-10-01T08:00:00.000Z",
      "id": "krai-ai-agent-modern",
      "name": "KRAI AI Agent"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-10-01T08:00:00.000Z",
  "versionId": "1"
}
