---
description: KR-AI-Engine Development Guidelines
globs:
alwaysApply: true
---

# 🚀 KR-AI-Engine Development Guidelines

## 📋 **WICHTIGE REGELN FÜR DIE IMPLEMENTIERUNG:**

### **🔄 DATA FLOW REGELN (KRITISCH!):**

#### **1. Processing Pipeline Reihenfolge (NIEMALS ÄNDERN!):**
```
1. 📤 Upload Processor → krai_core.documents (Database only)
2. 📄 Text Processor → krai_content.chunks + krai_intelligence.chunks  
3. 🖼️ Image Processor → krai_content.images (Object Storage)
4. 🏷️ Classification Processor → krai_core.manufacturers, products, product_series
5. 📑 Metadata Processor → krai_intelligence.error_codes
6. 💾 Storage Processor → Cloudflare R2 (NUR Bilder)
7. 🔪 Text Chunking → krai_intelligence.chunks
8. 🔮 Embedding Processor → krai_intelligence.embeddings
9. ✅ Finalization → krai_system.processing_queue
```

#### **2. Storage Rules (NIEMALS VERLETZEN!):**
- **Dokumente**: ❌ KEIN Object Storage (nur Database)
- **Dokument-Bilder**: ✅ krai-document-images Bucket
- **Fehler-Bilder**: ✅ krai-error-images Bucket (Defect Detection)
- **Teile-Bilder**: ✅ krai-parts-images Bucket

#### **3. Error Handling (STRENG!):**
- **Fehler = Stopp** (keine Retries)
- **Immer Loggen** für Debugging
- **Rollback** bei Fehlern
- **Sequential Processing** bei hohem Load

#### **4. Features Inheritance (WICHTIG!):**
- **Serie-Features** → `product_series.key_features` (JSONB)
- **Produkt-Features** → `products.*_capable` (BOOLEAN)
- **Automatische Vererbung**: Serie → Produkt
- **Features API** für Management

### **🤖 AI MODEL REGELN:**

#### **1. Hardware Detection (AUTOMATISCH!):**
- **RTX 2000 + 8GB VRAM** → HIGH_PERFORMANCE Tier
- **GPU Acceleration** → Immer aktiviert wenn verfügbar
- **Modell-Auswahl** → Basierend auf Hardware
- **Task-spezifische Zuordnung** → Richtiges Modell für jede Aufgabe

#### **2. Ollama Integration:**
- **Text Classification**: llama3.2:latest (2.0 GB)
- **Embeddings**: embeddinggemma:latest (621 MB)
- **Vision**: llava:latest (4.7 GB)
- **GPU Support** → Immer nutzen wenn verfügbar

### **🗄️ DATABASE REGELN:**

#### **1. Schema Mapping (EXAKT!):**
- **krai_core**: manufacturers, products, product_series, documents
- **krai_content**: chunks, images, print_defects
- **krai_intelligence**: chunks, embeddings, error_codes, search_analytics
- **krai_system**: processing_queue, audit_log, system_metrics

#### **2. Supabase Integration:**
- **MCP Server** → Für Database Connection
- **Vector Extensions** → pgvector für Embeddings
- **RLS Policies** → Sicherheit
- **Performance Indexes** → Optimierung

### **☁️ OBJECT STORAGE REGELN:**

#### **1. Cloudflare R2 (NUR Bilder!):**
- **krai-document-images** → Aus Dokumenten extrahierte Bilder
- **krai-error-images** → Defect Detection Bilder
- **krai-parts-images** → Parts Catalog Bilder
- **Deduplication** → File Hash basiert

#### **2. Bucket Management:**
- **Automatische Erstellung** → Falls nicht vorhanden
- **Organized Structure** → images/YYYY/MM/filename
- **Metadata Storage** → Database nur, nicht R2

### **🔧 IMPLEMENTATION REGELN:**

#### **1. Module Structure (EXAKT!):**
```
backend/
├── config/ai_config.py          # Hardware Detection + Model Config
├── core/base_processor.py       # Base Interface
├── processors/                  # 8 spezialisierte Prozessoren
├── services/                    # Database, Storage, AI Services
├── utils/                       # Chunk, Pattern, Image Utils
└── api/                         # FastAPI Endpoints
```

#### **2. Configuration Files (WICHTIG!):**
- **chunk_settings.json** → Text Chunking Strategies
- **error_code_patterns.json** → Error Code Patterns
- **version_patterns.json** → Version Extraction
- **model_placeholder_patterns.json** → Model Placeholders

#### **3. Resource Management:**
- **Low Resource**: upload, metadata, storage (1-2 Instanzen)
- **Medium Resource**: text, classification, search (2-3 Instanzen)
- **High Resource**: image, embedding (3-5 Instanzen)
- **Load Balancing** → Basierend auf Resource Usage

### **🚨 KRITISCHE FEHLER VERMEIDEN:**

#### **1. NIEMALS:**
- Dokumente in Object Storage speichern
- Data Flow Reihenfolge ändern
- GPU-Support ignorieren
- Error Handling umgehen
- Features Inheritance vergessen

#### **2. IMMER:**
- Hardware Detection beim Start
- GPU Acceleration nutzen
- Error = Stopp + Logging
- Database-only für Dokumente
- Object Storage nur für Bilder

#### **3. VALIDATION:**
- File Hash für Deduplication
- Model Placeholder Resolution
- Version Detection für Updates
- Pattern Matching für Error Codes
- Chunking basierend auf Document Type

### **📊 SUCCESS METRICS:**
- **Processing Speed** → GPU-optimiert
- **Storage Efficiency** → Keine Duplikate
- **Search Quality** → Vector Embeddings
- **Error Detection** → Pattern Matching
- **Features Accuracy** → AI Classification

---

**🎯 ZIEL: Perfekte Implementierung ohne Fehler!**
